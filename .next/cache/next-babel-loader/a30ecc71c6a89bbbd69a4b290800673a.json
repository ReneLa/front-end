{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport { GET_USER_PARENT_HOUSES } from \"../../queryComponents/ParentHouses\";\nimport gql from \"graphql-tag\";\nconst DELETE_PARENT_HOUSE = gql`\n  mutation DELETE_PARENT_HOUSE($id: ID!) {\n    deleteParentHouse(id: $id) {\n      id\n      building_name\n      image\n    }\n  }\n`;\n\nclass DeleteParentHouse extends React.Component {\n  //   update = (cache, payload) => {\n  //     // manually update the cache on the client, so it matches the server\n  //     // 1. Read the cache for the items we want\n  //     const data = cache.readQuery({ query: GET_USER_PARENT_HOUSES });\n  //     // console.log(data, payload);\n  //     // 2. Filter the deleted itemout of the page\n  //     // data.items = data.items.filter(\n  //     //   item => item.id !== payload.data.deleteItem.id\n  //     // );\n  //     // 3. Put the items back!\n  //     cache.writeQuery({ query: GET_USER_PARENT_HOUSES, data });\n  //   };\n  render() {\n    return __jsx(Mutation, {\n      mutation: DELETE_PARENT_HOUSE,\n      variables: {\n        id: this.props.id\n      },\n      refetchQueries: [{\n        query: GET_USER_PARENT_HOUSES\n      }] // update={this.update}\n\n    }, (deleteParentHouse, {\n      error\n    }) => __jsx(\"button\", {\n      style: {\n        color: \"red\"\n      },\n      onClick: () => {\n        if (confirm(\"Are you sure you want to delete this building?\")) {\n          deleteParentHouse().catch(err => {\n            alert(err.message);\n          });\n        }\n      }\n    }, \"delete\"));\n  }\n\n}\n\nexport default DeleteParentHouse;","map":null,"metadata":{},"sourceType":"module"}