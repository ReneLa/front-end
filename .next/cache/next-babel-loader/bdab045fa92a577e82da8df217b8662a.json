{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/mac/Projects/React js/House /HouseAssist/frontend/components/CustomLink.js\";\nvar __jsx = React.createElement;\nimport Link from \"next/link\";\nimport { withRouter } from \"next/router\";\nimport { Children } from \"react\";\nimport React from \"react\";\nexport default withRouter((_ref) => {\n  let {\n    router,\n    children,\n    as,\n    href\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"router\", \"children\", \"as\", \"href\"]);\n\n  return __jsx(Link, _extends({}, rest, {\n    href: href,\n    as: as,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }), React.cloneElement(Children.only(children), {\n    className: router.pathname === href || router.asPath === as ? `active` : null\n  }));\n}); // import React from \"react\";\n// import Link from \"next/link\";\n// import { useRouter } from \"next/router\";\n// export default ({ href, children }) => {\n//   const router = useRouter();\n//   let className = children.props.className || \"\";\n//   if (router.pathname === href) {\n//     className = `${className} selected`;\n//   }\n//   return <Link href={href}>{React.cloneElement(children, { className })}</Link>;\n// };\n// import { withRouter } from \"next/router\";\n// import Link from \"next/link\";\n// import React, { Children } from \"react\";\n// const ActiveLink = ({ router, children, ...props }) => {\n//   const child = Children.only(children);\n//   let className = child.props.className || \"\";\n//   if (router.pathname === props.href && props.activeClassName) {\n//     className = `${className}${props.activeClassName}`.trim();\n//   }\n//   delete props.activeClassName;\n//   return <Link {...props}>{React.cloneElement(child, { className })}</Link>;\n// };\n// export default withRouter(ActiveLink);","map":{"version":3,"sources":["/Users/mac/Projects/React js/House /HouseAssist/frontend/components/CustomLink.js"],"names":["Link","withRouter","Children","React","router","children","as","href","rest","cloneElement","only","className","pathname","asPath"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAeF,UAAU,CAAC;AAAA,MAAC;AAAEG,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA,EAApB;AAAwBC,IAAAA;AAAxB,GAAD;AAAA,MAAkCC,IAAlC;;AAAA,SACxB,MAAC,IAAD,eAAUA,IAAV;AAAgB,IAAA,IAAI,EAAED,IAAtB;AAA4B,IAAA,EAAE,EAAED,EAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGH,KAAK,CAACM,YAAN,CAAmBP,QAAQ,CAACQ,IAAT,CAAcL,QAAd,CAAnB,EAA4C;AAC3CM,IAAAA,SAAS,EACPP,MAAM,CAACQ,QAAP,KAAoBL,IAApB,IAA4BH,MAAM,CAACS,MAAP,KAAkBP,EAA9C,GAAoD,QAApD,GAA8D;AAFrB,GAA5C,CADH,CADwB;AAAA,CAAD,CAAzB,C,CASA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA","sourcesContent":["import Link from \"next/link\";\nimport { withRouter } from \"next/router\";\nimport { Children } from \"react\";\nimport React from \"react\";\n\nexport default withRouter(({ router, children, as, href, ...rest }) => (\n  <Link {...rest} href={href} as={as}>\n    {React.cloneElement(Children.only(children), {\n      className:\n        router.pathname === href || router.asPath === as ? `active` : null\n    })}\n  </Link>\n));\n\n// import React from \"react\";\n// import Link from \"next/link\";\n// import { useRouter } from \"next/router\";\n\n// export default ({ href, children }) => {\n//   const router = useRouter();\n\n//   let className = children.props.className || \"\";\n//   if (router.pathname === href) {\n//     className = `${className} selected`;\n//   }\n\n//   return <Link href={href}>{React.cloneElement(children, { className })}</Link>;\n// };\n\n// import { withRouter } from \"next/router\";\n// import Link from \"next/link\";\n// import React, { Children } from \"react\";\n// const ActiveLink = ({ router, children, ...props }) => {\n//   const child = Children.only(children);\n\n//   let className = child.props.className || \"\";\n//   if (router.pathname === props.href && props.activeClassName) {\n//     className = `${className}${props.activeClassName}`.trim();\n//   }\n\n//   delete props.activeClassName;\n\n//   return <Link {...props}>{React.cloneElement(child, { className })}</Link>;\n// };\n\n// export default withRouter(ActiveLink);\n"]},"metadata":{},"sourceType":"module"}