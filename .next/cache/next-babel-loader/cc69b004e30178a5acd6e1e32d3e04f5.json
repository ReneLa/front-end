{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\nimport { StepButton, StepLabel, Stepper, Step, IconButton, AppBar } from \"@material-ui/core\";\nimport Check from \"@material-ui/icons/Check\";\nimport HouseIcon from \"@material-ui/icons/House\";\nimport AddPhotoIcon from \"@material-ui/icons/AddPhotoAlternate\";\nimport LeaseIcon from \"@material-ui/icons/NoteAdd\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\"; // import BackIcon from \"@material-ui/icons/NoteAdd\";\n// import NextIcon from \"@material-ui/icons/NoteAdd\";\n\nimport ParentHouseIcon from \"@material-ui/icons/Apartment\";\nimport StepConnector from \"@material-ui/core/StepConnector\";\nimport { Container } from \"../../../styledComponents\";\nimport CreateHouse from \"./CreateHouse\";\nimport AddHouseImage from \"./AddHouseImage\";\nimport LeaseInfo from \"./LeaseInfo\";\nimport CreateParentHouse from \"./CreateParentHouse\";\n\nconst styles = theme => ({\n  list: {\n    width: 800\n  },\n  root: {\n    width: \"100%\"\n  },\n  button: {\n    margin: theme.spacing(1),\n    padding: 0\n  },\n  completed: {\n    display: \"inline-block\"\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  }\n});\n\nconst CustomStepConnector = withStyles({\n  alternativeLabel: {\n    top: 22\n  },\n  active: {\n    \"& $line\": {\n      backgroundImage: \"linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)\"\n    }\n  },\n  completed: {\n    \"& $line\": {\n      backgroundImage: \"linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)\"\n    }\n  },\n  line: {\n    height: 3,\n    border: 0,\n    backgroundColor: \"#eaeaf0\",\n    borderRadius: 1\n  }\n})(StepConnector);\nconst useCustomStepIconStyles = makeStyles({\n  root: {\n    backgroundColor: \"#ccc\",\n    zIndex: 1,\n    color: \"#fff\",\n    width: 30,\n    height: 30,\n    display: \"flex\",\n    borderRadius: \"50%\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  active: {\n    backgroundImage: \"linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)\",\n    boxShadow: \"0 4px 10px 0 rgba(0,0,0,.25)\"\n  },\n  completed: {\n    backgroundImage: \"linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)\"\n  }\n});\n\nfunction CustomStepIcon(props) {\n  const classes = useCustomStepIconStyles();\n  const {\n    active,\n    completed\n  } = props;\n  const icons = {\n    1: __jsx(HouseIcon, null),\n    2: __jsx(ParentHouseIcon, null),\n    3: __jsx(LeaseIcon, null),\n    4: __jsx(AddPhotoIcon, null)\n  };\n  return __jsx(\"div\", {\n    className: clsx(classes.root, {\n      [classes.active]: active,\n      [classes.completed]: completed\n    })\n  }, icons[String(props.icon)]);\n}\n\nclass Index extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      activeStep: 0,\n      completed: {}\n    });\n\n    _defineProperty(this, \"totalSteps\", () => {\n      const steps = this.getSteps();\n      return steps.length;\n    });\n\n    _defineProperty(this, \"completedSteps\", () => {\n      return Object.keys(this.state.completed).length;\n    });\n\n    _defineProperty(this, \"isLastStep\", () => {\n      return this.state.activeStep === this.totalSteps() - 1;\n    });\n\n    _defineProperty(this, \"allStepsCompleted\", () => {\n      return this.completedSteps() === this.totalSteps();\n    });\n\n    _defineProperty(this, \"handleNext\", () => {\n      const steps = this.getSteps();\n      const newActiveStep = this.isLastStep() && !this.allStepsCompleted() ? // It's the last step, but not all steps have been completed,\n      // find the first step that has been completed\n      steps.findIndex((step, i) => !(i in this.state.completed)) : this.state.activeStep + 1;\n      this.setState({\n        activeStep: newActiveStep\n      });\n    });\n\n    _defineProperty(this, \"handleBack\", () => {\n      this.setState({\n        activeStep: this.state.activeStep - 1\n      });\n    });\n\n    _defineProperty(this, \"handleStep\", step => () => {\n      this.setState({\n        activeStep: step\n      });\n    });\n\n    _defineProperty(this, \"handleComplete\", () => {\n      const newCompleted = this.state.completed;\n      newCompleted[this.state.activeStep] = true;\n      this.setState({\n        completed: newCompleted\n      });\n      this.handleNext();\n    });\n\n    _defineProperty(this, \"handleReset\", () => {\n      this.setState({\n        activeStep: 0,\n        completed: {}\n      });\n    });\n\n    _defineProperty(this, \"getSteps\", () => {\n      return [\" CREATE HOUSE\", \"BUILDINGS\", \"LEASE INFORMATION\", \"PHOTOS\"];\n    });\n\n    _defineProperty(this, \"getStepContent\", step => {\n      switch (step) {\n        case 0:\n          return __jsx(CreateHouse, {\n            onComplete: this.handleComplete\n          });\n        // return \"rene la\";\n\n        case 1:\n          return __jsx(CreateParentHouse, null);\n\n        case 2:\n          return __jsx(LeaseInfo, null);\n\n        case 3:\n          return __jsx(AddHouseImage, null);\n\n        default:\n          return;\n      }\n    });\n  }\n\n  render() {\n    const {\n      activeStep,\n      completed\n    } = this.state;\n    const {\n      classes,\n      onClose\n    } = this.props;\n    const steps = this.getSteps();\n    return __jsx(Container, {\n      flex: 1,\n      customStyles: {\n        width: 480,\n        height: \"100vh\",\n        position: \"relative\"\n      }\n    }, __jsx(AppBar, {\n      elevation: 0,\n      position: \"sticky\",\n      style: {\n        position: \"sticky\",\n        backgroundColor: \"transparent\"\n      }\n    }, __jsx(Stepper, {\n      style: {\n        height: 64\n      },\n      nonLinear: true,\n      activeStep: activeStep,\n      connector: __jsx(CustomStepConnector, null)\n    }, steps.map((label, index) => __jsx(Step, {\n      key: label\n    }, __jsx(StepButton, {\n      onClick: this.handleStep(index),\n      completed: completed[index]\n    }, __jsx(StepLabel, {\n      StepIconComponent: CustomStepIcon\n    }, label)))), __jsx(StepLabel, {\n      onClick: onClose,\n      icon: __jsx(\"p\", {\n        style: {\n          fontSize: 30,\n          fontWeight: 200,\n          marginLeft: 15,\n          color: \"inherit\",\n          cursor: \"pointer\"\n        }\n      }, \"\\xD7\")\n    }))), __jsx(Container, {\n      flex: 1\n    }, this.getStepContent(activeStep)));\n  }\n\n}\n\nexport default withStyles(styles)(Index);","map":null,"metadata":{},"sourceType":"module"}