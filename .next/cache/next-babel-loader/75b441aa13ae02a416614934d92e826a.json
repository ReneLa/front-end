{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport { Container, ActionButton, Text, Input, TextInput, SubText, OutlinedButton, SubHeader, CaptionText, PrimaryButton, Dropdown } from \"../../../styledComponents\";\nimport UploadIcon from \"@material-ui/icons/AddPhotoAlternate\";\nimport HouseIcon from \"@material-ui/icons/Home\";\nimport { withStyles, makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { Button, Typography, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Avatar } from \"@material-ui/core\";\nimport { GET_HOUSE_TYPES } from \"../../../queryComponents/HouseTypes\";\nimport { GET_COUNTRIES } from \"../../../queryComponents/Countries\";\nimport { GET_PROVINCES_IN_COUNTRY } from \"../../../queryComponents/Provinces\";\nimport { GET_DISTRICTS_IN_PROVINCE } from \"../../../queryComponents/Districts\";\nimport { GET_LANDLORD_TENANTS } from \"../../../queryComponents/landlord/LandlordTenants\";\nimport { GET_USER_HOUSES } from \"../../../queryComponents/landlord/LandlordHouses\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport AddIcon from \"@material-ui/icons/AddCircleOutline\";\nimport { PAGINATION_QUERY } from \"..\";\nconst useStyles = makeStyles(theme => ({\n  dialogPaper: {\n    height: 700,\n    minWidth: 900,\n    borderRadius: 2,\n    // position: \"relative\",\n    backgroundColor: \"#F2F3F4\"\n  },\n  dialogActionStyle: {\n    padding: 0,\n    margin: 0,\n    border: \"none\",\n    backgroundColor: \"#F2F3F4\"\n  },\n  dialogActions: {\n    // position: \"absolute\",\n    width: \"100%\",\n    // bottom: 0,\n    padding: 0,\n    margin: 0,\n    border: \"none\" // backgroundColor: \"white\"\n\n  },\n  dialogContentStyle: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    marginRight: 10,\n    height: \"100%\",\n    backgroundColor: \"white\",\n    border: \"none\" // backgroundColor: \"#F2F3F4\",\n\n  },\n  avatarStyle: {\n    position: \"relative\",\n    width: theme.spacing(12),\n    height: theme.spacing(10),\n    borderRadius: 5,\n    backgroundColor: \"#F3F2F1\"\n  },\n  inputStyle: {\n    border: 0,\n    borderRadius: 1,\n    paddingTop: 10,\n    paddingRight: 10,\n    paddingBottom: 10,\n    paddingLeft: 10,\n    backgroundColor: \"#F5F8FA\",\n    // lineHeight: 2,\n    minHeight: 60,\n    fontSize: 12,\n    \"&:focus\": {\n      border: \"1px solid #4C3AF7\",\n      backgroundColor: \"#FEFEFF\"\n    }\n  }\n}));\nconst ActionBtn = styled(ActionButton).withConfig({\n  displayName: \"CreateHouse__ActionBtn\",\n  componentId: \"e7caw8-0\"\n})([\"display:flex;justify-content:center;align-items:center;align-content:center;padding-right:10px;padding-left:10px;border-radius:2px;background-color:\", \";color:white;&:hover{color:#d1f2eb;}\"], ({\n  theme\n}) => theme.btnPrimary);\nconst CloseBtn = styled(ActionButton).withConfig({\n  displayName: \"CreateHouse__CloseBtn\",\n  componentId: \"e7caw8-1\"\n})([\"position:absolute;top:0;right:0;z-index:1304;display:flex;justify-content:center;align-items:center;align-content:center;padding-right:6px;padding-left:6px;border-radius:2px;background-color:\", \";\"], ({\n  theme\n}) => theme.bgPrimary);\nconst CancelBtn = styled(PrimaryButton).withConfig({\n  displayName: \"CreateHouse__CancelBtn\",\n  componentId: \"e7caw8-2\"\n})([\"border:none;color:\", \";background-color:transparent;&:hover{background-color:\", \";}\"], ({\n  theme\n}) => theme.primaryDark, ({\n  theme\n}) => theme.lightGrey);\nconst UploadBtn = styled(OutlinedButton).withConfig({\n  displayName: \"CreateHouse__UploadBtn\",\n  componentId: \"e7caw8-3\"\n})([\"display:flex;height:60px;width:100%;border:\", \";\"], ({\n  theme\n}) => `1px dashed ${theme.btnPrimary}`);\nconst CREATE_HOUSE_MUTATION = gql`\n  mutation CREATE_HOUSE_MUTATION(\n    $house_heading: String!\n    $house_no: String!\n    $house_description: String!\n    $house_type: ID\n    $parking: Int\n    $no_bedrooms: Int\n    $no_bathrooms: Int\n    $flooring: String\n    $appliances: [Appliances]\n    $utilities: [Utilities]\n    $ext_ft: [Ext_features]\n    $profileImage: String\n    $countryId: ID\n    $provinceId: ID\n    $districtId: ID\n  ) {\n    createHouse(\n      house_heading: $house_heading\n      house_no: $house_no\n      house_description: $house_description\n      house_type: $house_type\n      parking: $parking\n      no_bedrooms: $no_bedrooms\n      no_bathrooms: $no_bathrooms\n      flooring: $flooring\n      appliances: $appliances\n      utilities: $utilities\n      ext_ft: $ext_ft\n      profileImage: $profileImage\n      countryId: $countryId\n      provinceId: $provinceId\n      districtId: $districtId\n    ) {\n      id\n      house_heading\n      house_description\n      house_no\n    }\n  }\n`;\n\nconst HouseTypesList = ({\n  house_type,\n  setHouseType\n}) => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const {\n    0: options,\n    1: setOptions\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  async function handleClickOpen(event, client) {\n    setLoading(true);\n    setAnchorEl(event.currentTarget);\n    const res = await client.query({\n      query: GET_HOUSE_TYPES\n    });\n    const {\n      houseTypes\n    } = res.data;\n    setOptions(changeObj(houseTypes));\n  }\n\n  const changeObj = arr => {\n    let newArr = [];\n    arr.forEach((item, i) => {\n      const newItem = {\n        id: item.id,\n        value: item.house_type\n      };\n      newArr.push(newItem);\n    });\n    return newArr;\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return __jsx(ApolloConsumer, null, client => __jsx(Dropdown, {\n    title: house_type.length > 0 ? house_type[0].value : \"choose\",\n    anchorEl: anchorEl,\n    handleOpen: e => handleClickOpen(e, client),\n    handleClose: handleClose,\n    selection: house_type,\n    setSelection: setHouseType,\n    items: options,\n    wrapperStyles: {\n      width: 150\n    }\n  }));\n};\n\nconst ApplianceList = ({\n  list,\n  setList\n}) => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const {\n    0: options,\n    1: setOptions\n  } = useState([{\n    id: 1,\n    value: \"Dishwasher\"\n  }, {\n    id: 2,\n    value: \"Refrigrator\"\n  }, {\n    id: 3,\n    value: \"Microwave\"\n  }, {\n    id: 4,\n    value: \"Garbage_disposal\"\n  }, {\n    id: 5,\n    value: \"Oven\"\n  }]);\n\n  const handleClickOpen = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const valuesList = () => {\n    return __jsx(\"div\", null, list.map(lst => __jsx(\"span\", {\n      key: lst.id\n    }, lst.value + \", \")));\n  };\n\n  return __jsx(Dropdown, {\n    title: list.length > 0 ? valuesList() : \"choose\",\n    anchorEl: anchorEl,\n    handleOpen: handleClickOpen,\n    multiSelect: true,\n    handleClose: handleClose,\n    selection: list,\n    setSelection: setList,\n    items: options,\n    wrapperStyles: {\n      width: 200\n    }\n  });\n};\n\nconst UtilitiesList = ({\n  utilities,\n  setUtilities\n}) => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const {\n    0: options,\n    1: setOptions\n  } = useState([{\n    id: 1,\n    value: \"Internet\"\n  }, {\n    id: 2,\n    value: \"TV\"\n  }, {\n    id: 3,\n    value: \"Heater\"\n  }]);\n\n  const handleClickOpen = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const valuesList = () => {\n    return __jsx(\"div\", null, utilities.map(lst => __jsx(\"span\", {\n      key: lst.id\n    }, lst.value + \", \")));\n  };\n\n  return __jsx(Dropdown, {\n    title: utilities.length > 0 ? valuesList() : \"choose\",\n    anchorEl: anchorEl,\n    handleOpen: handleClickOpen,\n    multiSelect: true,\n    handleClose: handleClose,\n    selection: utilities,\n    setSelection: setUtilities,\n    items: options,\n    wrapperStyles: {\n      width: 200\n    }\n  });\n};\n\nconst ExtDetails = ({\n  ext_details,\n  setExtDetails\n}) => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const {\n    0: options,\n    1: setOptions\n  } = useState([{\n    id: 1,\n    value: \"Toilet\"\n  }, {\n    id: 2,\n    value: \"Garden\"\n  }, {\n    id: 3,\n    value: \"Fenced_yard\"\n  }, {\n    id: 4,\n    value: \"Balcony\"\n  }]);\n\n  const handleClickOpen = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const valuesList = () => {\n    return __jsx(\"div\", null, ext_details.map(lst => __jsx(\"span\", {\n      key: lst.id\n    }, lst.value + \", \")));\n  };\n\n  return __jsx(Dropdown, {\n    title: ext_details.length > 0 ? valuesList() : \"choose\",\n    anchorEl: anchorEl,\n    handleOpen: handleClickOpen,\n    multiSelect: true,\n    handleClose: handleClose,\n    selection: ext_details,\n    setSelection: setExtDetails,\n    items: options,\n    wrapperStyles: {\n      width: 200\n    }\n  });\n};\n\nconst Countries = ({\n  country,\n  setCountry\n}) => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const {\n    0: countryList,\n    1: setCountryList\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  async function getCountries(event, client) {\n    setLoading(true);\n    setAnchorEl(event.currentTarget);\n    const res = await client.query({\n      query: GET_COUNTRIES\n    });\n    const {\n      countries\n    } = res.data;\n    setCountryList(changeObj(countries));\n  }\n\n  const changeObj = arr => {\n    let newArr = [];\n    arr.forEach((item, i) => {\n      const newItem = {\n        id: item.id,\n        value: item.name\n      };\n      newArr.push(newItem);\n    });\n    return newArr;\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return __jsx(ApolloConsumer, null, client => __jsx(Container, {\n    column: true,\n    color: \"transparent\",\n    customStyles: {\n      marginRight: 10\n    }\n  }, __jsx(Dropdown, {\n    title: country.length > 0 ? country[0].value : \"Country\",\n    anchorEl: anchorEl,\n    handleOpen: e => getCountries(e, client),\n    handleClose: handleClose,\n    selection: country,\n    setSelection: setCountry,\n    items: countryList,\n    wrapperStyles: {\n      width: 150\n    }\n  })));\n};\n\nconst Provinces = ({\n  country,\n  province,\n  setProvince\n}) => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const {\n    0: provinceList,\n    1: setProvinceList\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  async function getProvinces(event, client) {\n    setLoading(true);\n    setAnchorEl(event.currentTarget);\n    const res = await client.query({\n      query: GET_PROVINCES_IN_COUNTRY,\n      variables: {\n        id: country[0].id\n      }\n    });\n    const provinces = res.data.getProvincesByCountry;\n    setProvinceList(changeObj(provinces));\n  }\n\n  const changeObj = arr => {\n    let newArr = [];\n    arr.forEach((item, i) => {\n      const newItem = {\n        id: item.id,\n        value: item.name\n      };\n      newArr.push(newItem);\n    });\n    return newArr;\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return __jsx(ApolloConsumer, null, client => __jsx(Container, {\n    column: true,\n    color: \"transparent\",\n    customStyles: {\n      pointerEvents: country.length === 0 ? \"none\" : \"auto\",\n      marginRight: 10\n    }\n  }, __jsx(Dropdown, {\n    title: province.length > 0 ? province[0].value : \"Province\",\n    anchorEl: anchorEl,\n    handleOpen: e => getProvinces(e, client),\n    handleClose: handleClose,\n    selection: province,\n    setSelection: setProvince,\n    items: provinceList,\n    wrapperStyles: {\n      width: 150\n    }\n  })));\n};\n\nconst Districts = ({\n  province,\n  district,\n  setDistrict\n}) => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const {\n    0: districtList,\n    1: setDistrictList\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  async function getDistricts(event, client) {\n    setLoading(true);\n    setAnchorEl(event.currentTarget);\n    const res = await client.query({\n      query: GET_DISTRICTS_IN_PROVINCE,\n      variables: {\n        id: province[0].id\n      }\n    });\n    const districts = res.data.getDistrictsByProvince;\n    setDistrictList(changeObj(districts));\n  }\n\n  const changeObj = arr => {\n    let newArr = [];\n    arr.forEach((item, i) => {\n      const newItem = {\n        id: item.id,\n        value: item.name\n      };\n      newArr.push(newItem);\n    });\n    return newArr;\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return __jsx(ApolloConsumer, null, client => __jsx(Container, {\n    column: true,\n    color: \"transparent\",\n    customStyles: {\n      pointerEvents: province.length === 0 ? \"none\" : \"auto\"\n    }\n  }, __jsx(Dropdown, {\n    title: district.length > 0 ? district[0].value : \"District\",\n    anchorEl: anchorEl,\n    handleOpen: e => getDistricts(e, client),\n    handleClose: handleClose,\n    selection: district,\n    setSelection: setDistrict,\n    items: districtList,\n    wrapperStyles: {\n      width: 150\n    }\n  })));\n};\n\nconst Tenants = ({\n  tenant,\n  setTenant\n}) => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const {\n    0: tenantsList,\n    1: setTenantsList\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  async function getTenants(event, client) {\n    setLoading(true);\n    setAnchorEl(event.currentTarget);\n    const res = await client.query({\n      query: GET_LANDLORD_TENANTS\n    });\n    const tenants = res.data.getLandlordTenants;\n    setTenantsList(changeObj(tenants));\n  }\n\n  const changeObj = arr => {\n    let newArr = [];\n    arr.forEach((item, i) => {\n      const newItem = {\n        id: item.id,\n        value: item.firstName\n      };\n      newArr.push(newItem);\n    });\n    return newArr;\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return __jsx(ApolloConsumer, null, client => __jsx(Container, {\n    column: true,\n    color: \"transparent\",\n    customStyles: {\n      marginRight: 10\n    }\n  }, __jsx(Dropdown, {\n    title: tenant.length > 0 ? tenant[0].value : \"Add Tenant\",\n    anchorEl: anchorEl,\n    handleOpen: e => getTenants(e, client),\n    handleClose: handleClose,\n    selection: tenant,\n    setSelection: setTenant,\n    items: tenantsList,\n    wrapperStyles: {\n      width: 100\n    }\n  })));\n};\n\nconst UploadImageContainer = ({\n  profileImg,\n  setProfile,\n  images,\n  setImages,\n  isUploading,\n  setIsUploading\n}) => {\n  const {\n    0: img_names,\n    1: setNames\n  } = useState([]);\n  const {\n    0: loaded,\n    1: setLoaded\n  } = useState(false);\n\n  const uploadProfile = async e => {\n    setIsUploading(true);\n    const files = e.target.files;\n    setNames([...img_names, files[0].name]);\n    const data = new FormData();\n    data.append(\"file\", files[0]);\n    data.append(\"upload_preset\", \"house_assist\");\n    const res = await fetch(\"https://api.cloudinary.com/v1_1/dsubmyluz/image/upload/\", {\n      method: \"POST\",\n      body: data\n    });\n    const file = await res.json();\n\n    if (file) {\n      setProfile(file.secure_url);\n      setLoaded(true);\n      setIsUploading(false);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Container, {\n    flex: 0,\n    row: true,\n    center: true,\n    color: \"transparent\",\n    customStyles: {\n      paddingTop: 10,\n      paddingBottom: 5\n    }\n  }, __jsx(Container, {\n    row: true,\n    center: true,\n    middle: true,\n    flex: 0,\n    customStyles: {\n      padding: 3,\n      marginRight: 5\n    }\n  }, __jsx(UploadIcon, {\n    style: {\n      fontSize: 25\n    }\n  })), __jsx(Container, {\n    flex: 1,\n    row: true,\n    center: true,\n    color: \"transparent\"\n  }, img_names.map((img, i) => __jsx(CaptionText, {\n    key: i,\n    customStyles: {\n      marginRight: 4,\n      color: \"black\",\n      fontSize: 13\n    }\n  }, img)))), __jsx(Container, {\n    flex: 1,\n    row: true,\n    customStyles: {\n      pointerEvents: loaded === 0 ? \"none\" : \"auto\"\n    }\n  }, __jsx(UploadBtn, {\n    type: \"button\"\n  }, __jsx(Input, {\n    accept: \"image/*\",\n    id: \"text-button-file\" // multiple\n    ,\n    type: \"file\",\n    onChange: uploadProfile,\n    style: {\n      marginLeft: 10,\n      width: 200\n    }\n  }))));\n};\n\nconst CreateHouse = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: scroll,\n    1: setScroll\n  } = useState(\"paper\");\n  const {\n    0: isUploading,\n    1: setIsUploading\n  } = useState(false);\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const {\n    0: house_heading,\n    1: setHouseHeading\n  } = useState(null);\n  const {\n    0: house_type,\n    1: setHouseType\n  } = useState([]);\n  const {\n    0: house_no,\n    1: setHouseNo\n  } = useState(null);\n  const {\n    0: house_description,\n    1: setHouseDesc\n  } = useState(null);\n  const {\n    0: parking,\n    1: setParking\n  } = useState(null);\n  const {\n    0: no_bathrooms,\n    1: setNoBathrooms\n  } = useState(null);\n  const {\n    0: no_bedrooms,\n    1: setNoBedrooms\n  } = useState(null);\n  const {\n    0: flooring,\n    1: setFloor\n  } = useState(null);\n  const {\n    0: applianceList,\n    1: setApplianceList\n  } = useState([]);\n  const {\n    0: utilities,\n    1: setUtilities\n  } = useState([]);\n  const {\n    0: ext_details,\n    1: setExtDetails\n  } = useState([]);\n  const {\n    0: tenant,\n    1: setTenant\n  } = useState([]);\n  const {\n    0: country,\n    1: setCountry\n  } = useState([]);\n  const {\n    0: district,\n    1: setDistrict\n  } = useState([]);\n  const {\n    0: province,\n    1: setProvince\n  } = useState([]);\n  const {\n    0: street,\n    1: setStreet\n  } = useState(\"\");\n  const {\n    0: profileImage,\n    1: setProfile\n  } = useState(null);\n  const {\n    0: images,\n    1: setImages\n  } = useState([]);\n\n  const changeObj = arr => {\n    let newArr = [];\n    arr.forEach((item, i) => {\n      newArr.push(item.value);\n    });\n    return newArr;\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setHouseHeading(null);\n    setHouseType([]);\n    setHouseNo(null);\n    setHouseDesc(null);\n    setParking(null);\n    setNoBathrooms(null);\n    setNoBedrooms(null);\n    setFloor(null);\n    setApplianceList([]);\n    setUtilities([]);\n    setExtDetails([]);\n    setTenant([]);\n    setCountry([]);\n    setDistrict([]);\n    setProvince([]);\n    setStreet(\"\");\n    setProfile(null);\n    setImages([]);\n  };\n\n  return __jsx(Mutation, {\n    mutation: CREATE_HOUSE_MUTATION,\n    refetchQueries: [{\n      query: GET_USER_HOUSES\n    }, {\n      query: PAGINATION_QUERY\n    }],\n    variables: {\n      house_heading,\n      house_no,\n      house_description,\n      house_type: house_type.length > 0 ? house_type[0].id : \"\",\n      parking: parseInt(parking),\n      no_bedrooms: parseInt(no_bathrooms),\n      no_bathrooms: parseInt(no_bedrooms),\n      flooring,\n      appliances: changeObj(applianceList),\n      utilities: changeObj(utilities),\n      ext_ft: changeObj(ext_details),\n      profileImage,\n      countryId: country.length > 0 ? country[0].id : \"\",\n      provinceId: province.length > 0 ? province[0].id : \"\",\n      districtId: district.length > 0 ? district[0].id : \"\"\n    }\n  }, (createHouse, {\n    loading,\n    error\n  }) => __jsx(\"div\", null, __jsx(ActionBtn, {\n    onClick: handleClickOpen // customStyles={{ backgroundColor: \"blue\" }}\n\n  }, __jsx(AddIcon, {\n    style: {\n      fontSize: 23,\n      marginRight: 5\n    }\n  }), \"Create House\"), __jsx(Dialog, {\n    fullScreen: fullScreen,\n    onClose: handleClose,\n    classes: {\n      paper: classes.dialogPaper\n    },\n    \"aria-labelledby\": \"customized-dialog-title\",\n    open: open,\n    scroll: scroll\n  }, __jsx(DialogTitle, {\n    id: \"scroll-dialog-title\",\n    classes: {\n      root: classes.dialogActionStyle\n    }\n  }, __jsx(Container, {\n    row: true,\n    center: true,\n    color: \"transparent\",\n    space: \"space-between\",\n    customStyles: {\n      paddingTop: 15,\n      paddingBottom: 7,\n      paddingRight: 10,\n      paddingLeft: 20\n    }\n  }, __jsx(SubHeader, null, \" Create House\"), __jsx(CancelBtn, {\n    onClick: handleClose\n  }, \"Cancel\"))), __jsx(\"form\", {\n    method: \"post\",\n    onSubmit: async e => {\n      e.preventDefault();\n      await createHouse().then(res => {\n        handleClose();\n      }).catch(err => {\n        alert(err);\n      });\n    },\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      paddingLeft: 20,\n      paddingRight: 20,\n      paddingTop: 10,\n      paddingBottom: 10\n    }\n  }, __jsx(DialogContent, {\n    dividers: scroll === \"body\",\n    style: {\n      flex: 0.6\n    },\n    classes: {\n      root: classes.dialogContentStyle\n    }\n  }, __jsx(\"div\", null, __jsx(Container, {\n    row: true,\n    center: true,\n    color: \"transparent\"\n  }, __jsx(CaptionText, {\n    customStyles: {\n      color: \"#323130\",\n      fontWeight: \"600\",\n      marginBottom: 10\n    }\n  }, \"House Details\")), __jsx(Container, {\n    color: \"transparent\",\n    row: true,\n    space: \"space-between\"\n  }, __jsx(Container, {\n    flex: 1,\n    customStyles: {\n      paddingRight: 10\n    },\n    color: \"transparent\"\n  }, __jsx(Input, {\n    label: \"Title\",\n    placeholder: \"eg. desired name\",\n    type: \"text\",\n    value: house_heading,\n    onChange: e => setHouseHeading(e.target.value)\n  })), __jsx(Container, {\n    color: \"transparent\",\n    flex: 1,\n    customStyles: {\n      paddingLeft: 10\n    }\n  }, __jsx(Input, {\n    label: \"House number\",\n    placeholder: \"eg. #A457\",\n    type: \"text\",\n    value: house_no,\n    onChange: e => setHouseNo(e.target.value)\n  }))), __jsx(Container, {\n    color: \"transparent\",\n    column: true,\n    flex: false,\n    customStyles: {\n      width: \"100%\"\n    }\n  }, __jsx(CaptionText, {\n    customStyles: {\n      marginBottom: 5,\n      color: \"#323130\"\n    }\n  }, \"Description\"), __jsx(\"textarea\", {\n    type: \"text\",\n    placeholder: \"start typing here...\",\n    className: classes.inputStyle,\n    value: house_description,\n    onChange: e => setHouseDesc(e.target.value)\n  })), __jsx(Container, {\n    row: true,\n    center: true,\n    color: \"transparent\"\n  }, __jsx(CaptionText, {\n    customStyles: {\n      color: \"#323130\",\n      fontWeight: \"600\",\n      marginTop: 20,\n      marginBottom: 10\n    }\n  }, \"Facts and Features\")), __jsx(Container, {\n    row: true,\n    space: \"space-between\",\n    color: \"transparent\"\n  }, __jsx(Container, {\n    flex: 0.3,\n    column: true,\n    color: \"transparent\"\n  }, __jsx(CaptionText, {\n    customStyles: {\n      marginBottom: 5,\n      color: \"#323130\"\n    }\n  }, \"House type\"), __jsx(HouseTypesList, {\n    house_type: house_type,\n    setHouseType: setHouseType\n  })), __jsx(Input, {\n    label: \"year built\",\n    type: \"date\",\n    placeholder: \"eg.2011\",\n    style: {\n      width: 150\n    } // value={house_heading}\n    // onChange={e => {\n    //   this.setState({ house_heading: e.target.value });\n    // }}\n\n  }), __jsx(Input, {\n    label: \"Parking\",\n    placeholder: \"eg. 3 cars\",\n    type: \"number\",\n    style: {\n      width: 100\n    },\n    value: parking,\n    onChange: e => setParking(e.target.value)\n  })), __jsx(Container, {\n    row: true,\n    center: true,\n    color: \"transparent\"\n  }, __jsx(CaptionText, {\n    customStyles: {\n      color: \"#323130\",\n      fontWeight: \"600\",\n      marginBottom: 10\n    }\n  }, \"Interior details\")), __jsx(Container, {\n    row: true,\n    color: \"transparent\",\n    customStyles: {\n      marginBottom: 10\n    }\n  }, __jsx(Container, {\n    color: \"transparent\",\n    customStyles: {\n      marginRight: 15\n    }\n  }, __jsx(TextInput, {\n    label: \"no. bedrooms\",\n    placeholder: \"0\",\n    type: \"number\",\n    customStyles: {\n      textAlign: \"center\",\n      width: 50\n    },\n    row: true,\n    value: no_bedrooms,\n    onChange: e => setNoBedrooms(e.target.value)\n  })), __jsx(Container, {\n    color: \"transparent\",\n    customStyles: {\n      marginRight: 15\n    }\n  }, __jsx(TextInput, {\n    label: \"no. bathrooms\",\n    type: \"number\",\n    placeholder: \"0\",\n    row: true,\n    customStyles: {\n      textAlign: \"center\",\n      width: 50\n    },\n    value: no_bathrooms,\n    onChange: e => setNoBathrooms(e.target.value)\n  })), __jsx(Container, {\n    color: \"transparent\"\n  }, __jsx(TextInput, {\n    label: \"Flooring\",\n    placeholder: \"eg. wooden floor\",\n    type: \"text\",\n    row: true,\n    customStyles: {\n      width: 140\n    },\n    value: flooring,\n    onChange: e => setFloor(e.target.value)\n  }))), __jsx(Container, {\n    row: true,\n    color: \"transparent\",\n    customStyles: {\n      marginBottom: 15\n    }\n  }, __jsx(Container, {\n    column: true,\n    color: \"transparent\",\n    customStyles: {\n      marginRight: 10\n    }\n  }, __jsx(CaptionText, {\n    customStyles: {\n      marginBottom: 5,\n      color: \"#323130\"\n    }\n  }, \"Appliances\"), __jsx(ApplianceList, {\n    list: applianceList,\n    setList: setApplianceList\n  })), __jsx(Container, {\n    column: true,\n    color: \"transparent\"\n  }, __jsx(CaptionText, {\n    customStyles: {\n      marginBottom: 5,\n      color: \"#323130\"\n    }\n  }, \"Utilities\"), __jsx(UtilitiesList, {\n    utilities: utilities,\n    setUtilities: setUtilities\n  }))), __jsx(Container, {\n    row: true,\n    center: true,\n    color: \"transparent\"\n  }, __jsx(CaptionText, {\n    customStyles: {\n      color: \"#323130\",\n      fontWeight: \"600\",\n      marginBottom: 10\n    }\n  }, \"Exterior details\")), __jsx(Container, {\n    row: true,\n    space: \"space-between\",\n    color: \"transparent\"\n  }, __jsx(Container, {\n    flex: 0.3,\n    column: true,\n    color: \"transparent\"\n  }, __jsx(ExtDetails, {\n    ext_details: ext_details,\n    setExtDetails: setExtDetails\n  }))), __jsx(Container, {\n    row: true,\n    center: true,\n    color: \"transparent\",\n    customStyles: {\n      marginBottom: 10\n    }\n  }, __jsx(CaptionText, {\n    customStyles: {\n      color: \"#323130\",\n      fontWeight: \"600\",\n      marginTop: 20\n    }\n  }, \"Location\")), __jsx(Container, {\n    row: true,\n    color: \"transparent\",\n    customStyles: {\n      marginBottom: 15\n    }\n  }, __jsx(Countries, {\n    country: country,\n    setCountry: setCountry\n  }), __jsx(Provinces, {\n    country: country,\n    province: province,\n    setProvince: setProvince\n  }), __jsx(Districts, {\n    district: district,\n    province: province,\n    setDistrict: setDistrict\n  })))), __jsx(\"div\", {\n    style: {\n      flex: 0.4,\n      paddingBottom: 10\n    }\n  }, __jsx(Container, {\n    flex: 0,\n    color: \"white\",\n    customStyles: {\n      paddingLeft: 20,\n      paddingRight: 20,\n      paddingTop: 10,\n      paddingBottom: 10\n    }\n  }, __jsx(Container, {\n    flex: 0,\n    row: true,\n    center: true,\n    color: \"transparent\"\n  }, __jsx(CaptionText, {\n    customStyles: {\n      color: \"#323130\",\n      fontWeight: \"600\",\n      marginBottom: 10\n    }\n  }, \"Add House Tenant\")), __jsx(Container, {\n    flex: 0,\n    row: true,\n    space: \"space-between\",\n    color: \"transparent\"\n  }, __jsx(Container, {\n    flex: 0.3,\n    column: true,\n    color: \"transparent\"\n  }, __jsx(Tenants, {\n    tenant: tenant,\n    setTenant: setTenant\n  }))), __jsx(Container, {\n    flex: 0,\n    row: true,\n    center: true,\n    color: \"transparent\",\n    customStyles: {\n      marginTop: 20\n    }\n  }, __jsx(CaptionText, {\n    customStyles: {\n      color: \"#323130\",\n      fontWeight: \"600\",\n      marginBottom: 10\n    }\n  }, \"Upload house images\")), __jsx(UploadImageContainer, {\n    isUploading: isUploading,\n    setIsUploading: setIsUploading,\n    profileImg: profileImage,\n    setProfile: setProfile,\n    images: images,\n    setImages: setImages\n  }), __jsx(Container, {\n    color: \"transparent\",\n    right: true,\n    center: true,\n    row: true,\n    flex: false,\n    customStyles: {\n      paddingTop: 30,\n      paddingBottom: 5\n    }\n  }, isUploading ? __jsx(PrimaryButton, {\n    type: \"submit\",\n    customStyles: {\n      pointerEvents: isUploading ? \"none\" : \"auto\"\n    }\n  }, \"Uploading..\") : __jsx(PrimaryButton, {\n    type: \"submit\",\n    customStyles: {\n      pointerEvents: isUploading ? \"none\" : \"auto\"\n    }\n  }, loading ? \"saving\" : \"Save House\"))))))));\n};\n\nexport default CreateHouse;","map":null,"metadata":{},"sourceType":"module"}