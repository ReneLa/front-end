{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport { Container, ActionButton, Text, Input, TextInput, SubText, OutlinedButton, SubHeader, CaptionText, PrimaryButton, Dropdown } from \"../../../styledComponents\";\nimport UploadIcon from \"@material-ui/icons/AddPhotoAlternate\";\nimport HouseIcon from \"@material-ui/icons/Home\";\nimport { withStyles, makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { Button, Typography, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Avatar } from \"@material-ui/core\";\nimport { GET_COUNTRIES } from \"../../../queryComponents/Countries\";\nimport { GET_PROVINCES_IN_COUNTRY } from \"../../../queryComponents/Provinces\";\nimport { GET_DISTRICTS_IN_PROVINCE } from \"../../../queryComponents/Districts\";\nimport { GET_LANDLORD_TENANTS } from \"../../../queryComponents/landlord/LandlordTenants\";\nimport { GET_USER_HOUSES } from \"../../../queryComponents/landlord/LandlordHouses\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport AddIcon from \"@material-ui/icons/AddCircleOutline\";\nconst useStyles = makeStyles(theme => ({\n  dialogPaper: {\n    height: 700,\n    // minWidth: 900,\n    borderRadius: 2,\n    // position: \"relative\",\n    backgroundColor: \"#F2F3F4\"\n  },\n  dialogActionStyle: {\n    padding: 0,\n    margin: 0,\n    border: \"none\",\n    backgroundColor: \"#F2F3F4\"\n  },\n  dialogActions: {\n    // position: \"absolute\",\n    width: \"100%\",\n    // bottom: 0,\n    padding: 0,\n    margin: 0,\n    border: \"none\" // backgroundColor: \"white\"\n\n  },\n  dialogContentStyle: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    marginRight: 10,\n    height: \"100%\",\n    backgroundColor: \"white\",\n    border: \"none\" // backgroundColor: \"#F2F3F4\",\n\n  },\n  avatarStyle: {\n    position: \"relative\",\n    width: theme.spacing(12),\n    height: theme.spacing(10),\n    borderRadius: 5,\n    backgroundColor: \"#F3F2F1\"\n  },\n  inputStyle: {\n    border: 0,\n    borderRadius: 1,\n    paddingTop: 10,\n    paddingRight: 10,\n    paddingBottom: 10,\n    paddingLeft: 10,\n    backgroundColor: \"#F5F8FA\",\n    // lineHeight: 2,\n    minHeight: 60,\n    fontSize: 12,\n    \"&:focus\": {\n      border: \"1px solid #4C3AF7\",\n      backgroundColor: \"#FEFEFF\"\n    }\n  }\n}));\nconst ActionBtn = styled(ActionButton).withConfig({\n  displayName: \"CreateTenant__ActionBtn\",\n  componentId: \"sc-3akzex-0\"\n})([\"display:flex;justify-content:center;align-items:center;align-content:center;padding-right:10px;padding-left:10px;border-radius:2px;background-color:\", \";\"], ({\n  theme\n}) => theme.lightGrey);\nconst CloseBtn = styled(ActionButton).withConfig({\n  displayName: \"CreateTenant__CloseBtn\",\n  componentId: \"sc-3akzex-1\"\n})([\"position:absolute;top:0;right:0;z-index:1304;display:flex;justify-content:center;align-items:center;align-content:center;padding-right:6px;padding-left:6px;border-radius:2px;background-color:\", \";\"], ({\n  theme\n}) => theme.bgPrimary);\nconst CancelBtn = styled(PrimaryButton).withConfig({\n  displayName: \"CreateTenant__CancelBtn\",\n  componentId: \"sc-3akzex-2\"\n})([\"border:none;color:\", \";background-color:transparent;&:hover{background-color:\", \";}\"], ({\n  theme\n}) => theme.primaryDark, ({\n  theme\n}) => theme.lightGrey);\nconst UploadBtn = styled(OutlinedButton).withConfig({\n  displayName: \"CreateTenant__UploadBtn\",\n  componentId: \"sc-3akzex-3\"\n})([\"display:flex;height:60px;width:100%;border:\", \";\"], ({\n  theme\n}) => `1px dashed ${theme.btnPrimary}`);\nconst CREATE_TENANT_MUTATION = gql`\n  mutation CREATE_TENANT_MUTATION(\n    $firstName: String!\n    $lastName: String!\n    $no_people: Int\n    $tenantType: String\n    $isActive: Boolean\n    $tel_no: String\n    $sex: String\n    $stay_duration: DateTime\n    $comm_email: String\n    $profileImage: String\n    $houseId: ID\n    $from_date: DateTime\n    $to_date: DateTime\n    $countryId: ID\n    $provinceId: ID\n    $districtId: ID\n    $street: String\n  ) {\n    createTenant(\n      firstName: $firstName\n      lastName: $lastName\n      no_people: $no_people\n      tenantType: $tenantType\n      isActive: $isActive\n      tel_no: $tel_no\n      sex: $sex\n      stay_duration: $stay_duration\n      comm_email: $comm_email\n      profileImage: $profileImage\n      houseId: $houseId\n      from_date: $from_date\n      to_date: $to_date\n      countryId: $countryId\n      provinceId: $provinceId\n      districtId: $districtId\n      street: $street\n    ) {\n      id\n    }\n  }\n`;\n\nconst Houses = ({\n  house,\n  setHouse\n}) => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const {\n    0: housesList,\n    1: setHousesList\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  async function getTenants(event, client) {\n    setLoading(true);\n    setAnchorEl(event.currentTarget);\n    const res = await client.query({\n      query: GET_USER_HOUSES\n    });\n    const houses = res.data.getUserHouses;\n    setHousesList(changeObj(houses));\n    console.log(houses);\n  }\n\n  const changeObj = arr => {\n    let newArr = [];\n    arr.forEach((item, i) => {\n      const newItem = {\n        id: item.id,\n        value: item.house_heading\n      };\n      newArr.push(newItem);\n    });\n    return newArr;\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return __jsx(ApolloConsumer, null, client => __jsx(Container, {\n    column: true,\n    color: \"transparent\",\n    customStyles: {\n      marginRight: 10,\n      marginBottom: 10\n    }\n  }, __jsx(Dropdown, {\n    title: house.length > 0 ? house[0].value : \"Add House\",\n    anchorEl: anchorEl,\n    handleOpen: e => getTenants(e, client),\n    handleClose: handleClose,\n    selection: house,\n    setSelection: setHouse,\n    items: housesList,\n    wrapperStyles: {\n      width: 100\n    }\n  })));\n};\n\nconst Countries = ({\n  country,\n  setCountry\n}) => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const {\n    0: countryList,\n    1: setCountryList\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  async function getCountries(event, client) {\n    setLoading(true);\n    setAnchorEl(event.currentTarget);\n    const res = await client.query({\n      query: GET_COUNTRIES\n    });\n    const {\n      countries\n    } = res.data;\n    setCountryList(changeObj(countries));\n  }\n\n  const changeObj = arr => {\n    let newArr = [];\n    arr.forEach((item, i) => {\n      const newItem = {\n        id: item.id,\n        value: item.name\n      };\n      newArr.push(newItem);\n    });\n    return newArr;\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return __jsx(ApolloConsumer, null, client => __jsx(Container, {\n    column: true,\n    color: \"transparent\",\n    customStyles: {\n      marginRight: 10\n    }\n  }, __jsx(Dropdown, {\n    title: country.length > 0 ? country[0].value : \"Country\",\n    anchorEl: anchorEl,\n    handleOpen: e => getCountries(e, client),\n    handleClose: handleClose,\n    selection: country,\n    setSelection: setCountry,\n    items: countryList,\n    wrapperStyles: {\n      width: 150\n    }\n  })));\n};\n\nconst Provinces = ({\n  country,\n  province,\n  setProvince\n}) => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const {\n    0: provinceList,\n    1: setProvinceList\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  async function getProvinces(event, client) {\n    setLoading(true);\n    setAnchorEl(event.currentTarget);\n    const res = await client.query({\n      query: GET_PROVINCES_IN_COUNTRY,\n      variables: {\n        id: country[0].id\n      }\n    });\n    const provinces = res.data.getProvincesByCountry;\n    setProvinceList(changeObj(provinces));\n  }\n\n  const changeObj = arr => {\n    let newArr = [];\n    arr.forEach((item, i) => {\n      const newItem = {\n        id: item.id,\n        value: item.name\n      };\n      newArr.push(newItem);\n    });\n    return newArr;\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return __jsx(ApolloConsumer, null, client => __jsx(Container, {\n    column: true,\n    color: \"transparent\",\n    customStyles: {\n      pointerEvents: country.length === 0 ? \"none\" : \"auto\",\n      marginRight: 10\n    }\n  }, __jsx(Dropdown, {\n    title: province.length > 0 ? province[0].value : \"Province\",\n    anchorEl: anchorEl,\n    handleOpen: e => getProvinces(e, client),\n    handleClose: handleClose,\n    selection: province,\n    setSelection: setProvince,\n    items: provinceList,\n    wrapperStyles: {\n      width: 150\n    }\n  })));\n};\n\nconst Districts = ({\n  province,\n  district,\n  setDistrict\n}) => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const {\n    0: districtList,\n    1: setDistrictList\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  async function getDistricts(event, client) {\n    setLoading(true);\n    setAnchorEl(event.currentTarget);\n    const res = await client.query({\n      query: GET_DISTRICTS_IN_PROVINCE,\n      variables: {\n        id: province[0].id\n      }\n    });\n    const districts = res.data.getDistrictsByProvince;\n    setDistrictList(changeObj(districts));\n  }\n\n  const changeObj = arr => {\n    let newArr = [];\n    arr.forEach((item, i) => {\n      const newItem = {\n        id: item.id,\n        value: item.name\n      };\n      newArr.push(newItem);\n    });\n    return newArr;\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return __jsx(ApolloConsumer, null, client => __jsx(Container, {\n    column: true,\n    color: \"transparent\",\n    customStyles: {\n      pointerEvents: province.length === 0 ? \"none\" : \"auto\"\n    }\n  }, __jsx(Dropdown, {\n    title: district.length > 0 ? district[0].value : \"District\",\n    anchorEl: anchorEl,\n    handleOpen: e => getDistricts(e, client),\n    handleClose: handleClose,\n    selection: district,\n    setSelection: setDistrict,\n    items: districtList,\n    wrapperStyles: {\n      width: 150\n    }\n  })));\n};\n\nconst UploadImageContainer = ({\n  profileImg,\n  setProfile,\n  images,\n  setImages,\n  isUploading,\n  setIsUploading\n}) => {\n  const {\n    0: img_names,\n    1: setNames\n  } = useState([]);\n  const {\n    0: loaded,\n    1: setLoaded\n  } = useState(false);\n\n  const uploadProfile = async e => {\n    setIsUploading(true);\n    const files = e.target.files;\n    setNames([...img_names, files[0].name]);\n    const data = new FormData();\n    data.append(\"file\", files[0]);\n    data.append(\"upload_preset\", \"house_assist\");\n    const res = await fetch(\"https://api.cloudinary.com/v1_1/dsubmyluz/image/upload/\", {\n      method: \"POST\",\n      body: data\n    });\n    const file = await res.json();\n\n    if (file) {\n      setProfile(file.secure_url);\n      setLoaded(true);\n      setIsUploading(false);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Container, {\n    flex: 0,\n    row: true,\n    center: true,\n    color: \"transparent\",\n    customStyles: {\n      paddingTop: 10,\n      paddingBottom: 5\n    }\n  }, __jsx(Container, {\n    row: true,\n    center: true,\n    middle: true,\n    flex: 0,\n    customStyles: {\n      padding: 3,\n      marginRight: 5\n    }\n  }, __jsx(UploadIcon, {\n    style: {\n      fontSize: 25\n    }\n  })), __jsx(Container, {\n    flex: 1,\n    row: true,\n    center: true,\n    color: \"transparent\"\n  }, img_names.map((img, i) => __jsx(CaptionText, {\n    key: i,\n    customStyles: {\n      marginRight: 4,\n      color: \"black\",\n      fontSize: 13\n    }\n  }, img)))), __jsx(Container, {\n    flex: 0.5,\n    row: true,\n    customStyles: {\n      pointerEvents: loaded === 0 ? \"none\" : \"auto\"\n    }\n  }, __jsx(UploadBtn, {\n    type: \"button\"\n  }, __jsx(Input, {\n    accept: \"image/*\",\n    id: \"text-button-file\" // multiple\n    ,\n    type: \"file\",\n    onChange: uploadProfile,\n    style: {\n      marginLeft: 10,\n      width: 200\n    }\n  }))));\n};\n\nconst CreateTenant = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: isUploading,\n    1: setIsUploading\n  } = useState(false);\n  const {\n    0: scroll,\n    1: setScroll\n  } = useState(\"paper\");\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const {\n    0: firstName,\n    1: setFirstName\n  } = useState(null);\n  const {\n    0: lastName,\n    1: setLastName\n  } = useState(null);\n  const {\n    0: no_people,\n    1: setNoPeople\n  } = useState(null);\n  const {\n    0: comm_email,\n    1: setCommEmail\n  } = useState(null);\n  const {\n    0: tel_no,\n    1: setTelNo\n  } = useState(null);\n  const {\n    0: sex,\n    1: setSex\n  } = useState(null);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: tenantType,\n    1: setTenantType\n  } = useState(null);\n  const {\n    0: from_date,\n    1: setFromDate\n  } = useState(null);\n  const {\n    0: to_date,\n    1: setToDate\n  } = useState(null);\n  const {\n    0: stay_duration,\n    1: setStayDuration\n  } = useState(null);\n  const {\n    0: country,\n    1: setCountry\n  } = useState([]);\n  const {\n    0: district,\n    1: setDistrict\n  } = useState([]);\n  const {\n    0: province,\n    1: setProvince\n  } = useState([]);\n  const {\n    0: profileImage,\n    1: setProfile\n  } = useState(null);\n  const {\n    0: images,\n    1: setImages\n  } = useState([]);\n  const {\n    0: house,\n    1: setHouse\n  } = useState([]);\n  const {\n    0: street,\n    1: setStreet\n  } = useState(\"\");\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  var curr = new Date();\n  curr.setDate(curr.getDate() + 3);\n  var date = curr.toISOString().substr(0, 10);\n  return __jsx(Mutation, {\n    mutation: CREATE_TENANT_MUTATION,\n    refetchQueries: [{\n      query: GET_LANDLORD_TENANTS\n    }],\n    variables: {\n      firstName,\n      lastName,\n      no_people: parseInt(no_people),\n      tenantType,\n      isActive: house.length > 0 ? true : false,\n      tel_no,\n      sex,\n      stay_duration,\n      comm_email,\n      profileImage,\n      houseId: house.length > 0 ? house[0].id : \"\",\n      from_date,\n      to_date,\n      countryId: country.length > 0 ? country[0].id : \"\",\n      provinceId: province.length > 0 ? province[0].id : \"\",\n      districtId: district.length > 0 ? district[0].id : \"\",\n      street\n    }\n  }, (createTenant, {\n    loading,\n    error\n  }) => __jsx(\"div\", null, __jsx(ActionBtn, {\n    onClick: handleClickOpen\n  }, __jsx(AddIcon, {\n    style: {\n      fontSize: 23,\n      marginRight: 5\n    }\n  }), \"Add Tenant\"), __jsx(Dialog, {\n    fullScreen: fullScreen,\n    onClose: handleClose,\n    classes: {\n      paper: classes.dialogPaper\n    },\n    \"aria-labelledby\": \"customized-dialog-title\",\n    open: open,\n    scroll: scroll\n  }, __jsx(DialogTitle, {\n    id: \"scroll-dialog-title\",\n    classes: {\n      root: classes.dialogActionStyle\n    }\n  }, __jsx(Container, {\n    row: true,\n    center: true,\n    color: \"transparent\",\n    space: \"space-between\",\n    customStyles: {\n      paddingTop: 15,\n      paddingBottom: 7,\n      paddingRight: 10,\n      paddingLeft: 20\n    }\n  }, __jsx(SubHeader, null, \" Add Tenant\"), __jsx(CancelBtn, {\n    onClick: handleClose\n  }, \"Cancel\"))), __jsx(\"form\", {\n    method: \"post\",\n    onSubmit: async e => {\n      e.preventDefault();\n      await createTenant().then(res => {\n        handleClose();\n      }).catch(err => {\n        alert(err);\n      });\n    },\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      paddingLeft: 20,\n      paddingRight: 20,\n      paddingTop: 10,\n      paddingBottom: 10\n    }\n  }, __jsx(DialogContent, {\n    dividers: scroll === \"body\",\n    style: {\n      flex: 1\n    },\n    classes: {\n      root: classes.dialogContentStyle\n    }\n  }, __jsx(\"div\", null, __jsx(Container, {\n    row: true,\n    center: true,\n    color: \"transparent\"\n  }, __jsx(CaptionText, {\n    customStyles: {\n      color: \"#323130\",\n      fontWeight: \"600\",\n      marginBottom: 10\n    }\n  }, \"Profile Information\")), __jsx(Container, {\n    color: \"transparent\",\n    row: true,\n    space: \"space-between\"\n  }, __jsx(Container, {\n    flex: 1,\n    customStyles: {\n      paddingRight: 10\n    },\n    color: \"transparent\"\n  }, __jsx(Input, {\n    placeholder: \"First Name\",\n    type: \"text\",\n    value: firstName,\n    onChange: e => setFirstName(e.target.value)\n  })), __jsx(Container, {\n    color: \"transparent\",\n    flex: 1,\n    customStyles: {\n      paddingLeft: 10\n    }\n  }, __jsx(Input, {\n    placeholder: \"Last Name\",\n    type: \"text\",\n    value: lastName,\n    onChange: e => setLastName(e.target.value)\n  }))), __jsx(Container, {\n    color: \"transparent\",\n    row: true,\n    space: \"space-between\"\n  }, __jsx(Container, {\n    flex: 1,\n    customStyles: {\n      paddingRight: 10\n    },\n    color: \"transparent\"\n  }, __jsx(Input, {\n    placeholder: \"E-mail\",\n    type: \"email\",\n    value: comm_email,\n    onChange: e => setCommEmail(e.target.value)\n  })), __jsx(Container, {\n    color: \"transparent\",\n    flex: 1,\n    customStyles: {\n      paddingLeft: 10\n    }\n  }, __jsx(Input, {\n    placeholder: \"Tel no\",\n    type: \"phone\",\n    value: tel_no,\n    onChange: e => setTelNo(e.target.value)\n  }))), __jsx(Container, {\n    color: \"transparent\",\n    row: true,\n    space: \"space-between\"\n  }, __jsx(Container, {\n    flex: 1,\n    customStyles: {\n      paddingRight: 10\n    },\n    color: \"transparent\"\n  }, __jsx(Input, {\n    placeholder: \"No. of family\",\n    type: \"number\",\n    value: no_people,\n    onChange: e => setNoPeople(e.target.value)\n  })), __jsx(Container, {\n    color: \"transparent\",\n    flex: 1,\n    customStyles: {\n      paddingLeft: 10\n    }\n  }, __jsx(Input, {\n    placeholder: \"Sex\",\n    type: \"text\",\n    value: sex,\n    onChange: e => setSex(e.target.value)\n  }))), __jsx(Container, {\n    row: true,\n    center: true,\n    color: \"transparent\"\n  }, __jsx(CaptionText, {\n    customStyles: {\n      color: \"#323130\",\n      fontWeight: \"600\",\n      marginTop: 10,\n      marginBottom: 10\n    }\n  }, \"Duration of stay\")), __jsx(Container, {\n    row: true,\n    color: \"transparent\"\n  }, __jsx(Input, {\n    type: \"date\",\n    label: \"From\",\n    defaultValue: date,\n    value: from_date,\n    onChange: e => setFromDate(e.target.value),\n    style: {\n      marginRight: 20\n    }\n  }), __jsx(Input, {\n    type: \"date\",\n    label: \"To..\",\n    defaultValue: date,\n    value: to_date,\n    onChange: e => setToDate(e.target.value)\n  })), __jsx(Container, {\n    row: true,\n    center: true,\n    color: \"transparent\",\n    customStyles: {\n      marginBottom: 10\n    }\n  }, __jsx(CaptionText, {\n    customStyles: {\n      color: \"#323130\",\n      fontWeight: \"600\",\n      marginTop: 10\n    }\n  }, \"Location\")), __jsx(Container, {\n    row: true,\n    color: \"transparent\",\n    customStyles: {\n      marginBottom: 15\n    }\n  }, __jsx(Countries, {\n    country: country,\n    setCountry: setCountry\n  }), __jsx(Provinces, {\n    country: country,\n    province: province,\n    setProvince: setProvince\n  }), __jsx(Districts, {\n    district: district,\n    province: province,\n    setDistrict: setDistrict\n  })), __jsx(Container, {\n    flex: 0,\n    row: true,\n    center: true,\n    color: \"transparent\"\n  }, __jsx(CaptionText, {\n    customStyles: {\n      color: \"#323130\",\n      fontWeight: \"600\",\n      marginBottom: 10\n    }\n  }, \"Add House Tenant\")), __jsx(Container, {\n    flex: 0,\n    row: true,\n    center: true // space=\"space-between\"\n    ,\n    color: \"transparent\"\n  }, __jsx(Container, {\n    flex: 0.3,\n    column: true,\n    color: \"transparent\"\n  }, __jsx(Houses, {\n    house: house,\n    setHouse: setHouse\n  })), __jsx(CaptionText, {\n    customStyles: {\n      color: \"#E74C3C\"\n    }\n  }, \"you need to atleast have one house\")), __jsx(Container, {\n    row: true,\n    center: true,\n    color: \"transparent\"\n  }, __jsx(CaptionText, {\n    customStyles: {\n      color: \"#323130\",\n      fontWeight: \"600\",\n      marginBottom: 10\n    }\n  }, \"Profile picture\")), __jsx(UploadImageContainer, {\n    isUploading: isUploading,\n    setIsUploading: setIsUploading,\n    profileImg: profileImage,\n    setProfile: setProfile,\n    images: images,\n    setImages: setImages\n  }), __jsx(Container, {\n    color: \"transparent\",\n    right: true,\n    center: true,\n    row: true,\n    flex: false,\n    customStyles: {\n      paddingTop: 30,\n      paddingBottom: 5\n    }\n  }, isUploading ? __jsx(PrimaryButton, {\n    type: \"submit\",\n    customStyles: {\n      pointerEvents: isUploading ? \"none\" : \"auto\",\n      opacity: isUploading ? 0.5 : 1\n    }\n  }, \"Uploading..\") : __jsx(PrimaryButton, {\n    type: \"submit\",\n    customStyles: {\n      pointerEvents: house.length <= 0 ? \"none\" : \"auto\",\n      opacity: house.length <= 0 ? 0.5 : 1\n    }\n  }, loading ? \"saving\" : \"Save Tenant\"))))))));\n};\n\nexport default CreateTenant;","map":null,"metadata":{},"sourceType":"module"}