{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport { GET_USER_HOUSES } from \"../../queryComponents/Houses\";\nimport gql from \"graphql-tag\";\nimport { IconButton } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nconst DELETE_HOUSE = gql`\n  mutation DELETE_HOUSE($id: ID!) {\n    deleteHouse(id: $id) {\n      id\n      house_heading\n    }\n  }\n`;\n\nclass DeleteHouse extends React.Component {\n  // update = (cache, payload) => {\n  //   // manually update the cache on the client, so it matches the server\n  //   // 1. Read the cache for the items we want\n  //   const data = cache.readQuery({ query: GET_USER_HOUSES });\n  //   // console.log(data, payload);\n  //   // 2. Filter the deleted itemout of the page\n  //   // data.items = data.items.filter(\n  //   //   item => item.id !== payload.data.deleteItem.id\n  //   // );\n  //   // 3. Put the items back!\n  //   cache.writeQuery({ query: GET_USER_HOUSES, data });\n  // };\n  render() {\n    return __jsx(Mutation, {\n      mutation: DELETE_HOUSE,\n      variables: {\n        id: this.props.id\n      } // update={this.update}\n      ,\n      refetchQueries: [{\n        query: GET_USER_HOUSES\n      }]\n    }, (deleteHouse, {\n      error\n    }) => __jsx(IconButton, {\n      style: {\n        padding: 5\n      },\n      onClick: () => {\n        if (confirm(\"Are you sure you want to delete this house?\")) {\n          deleteHouse().then(res => {\n            this.props.onClose();\n          }).catch(err => {\n            alert(err.message);\n          });\n        }\n      }\n    }, __jsx(DeleteIcon, {\n      style: {\n        fontSize: 17\n      }\n    })));\n  }\n\n}\n\nexport default DeleteHouse;","map":null,"metadata":{},"sourceType":"module"}