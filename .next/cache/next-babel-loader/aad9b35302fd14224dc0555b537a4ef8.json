{"ast":null,"code":"var __jsx = React.createElement;\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { Avatar, Dialog, DialogActions, DialogContent, DialogTitle, Divider } from \"@material-ui/core\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport Add from \"@material-ui/icons/Add\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CheckIcon from \"@material-ui/icons/Done\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport styled from \"styled-components\";\nimport loadingImg from \"../../../../public/static/126.gif\";\nimport ParentHouses, { GET_USER_PARENT_HOUSES } from \"../../../queryComponents/ParentHouses\";\nimport { ActionButton, CaptionText, Container, Header, IconButton, Input, PrimaryButton, SubHeader } from \"../../../styledComponents\";\nconst useStyles = makeStyles(theme => ({\n  dialogPaper: {\n    height: 700,\n    width: 525,\n    borderRadius: 2,\n    backgroundColor: \"white\",\n    position: \"relative\"\n  },\n  dialogActionStyle: {\n    padding: 0,\n    margin: 0,\n    border: \"none\",\n    backgroundColor: \"white\"\n  },\n  dialogActions: {\n    position: \"absolute\",\n    width: \"100%\",\n    bottom: 0,\n    padding: 10,\n    margin: 0,\n    border: \"none\" // backgroundColor: \"red\",\n\n  },\n  dialogContentStyle: {\n    display: \"flex\",\n    padding: 0,\n    border: \"none\",\n    backgroundColor: \"white\"\n  },\n  avatarStyle: {\n    width: theme.spacing(5),\n    height: theme.spacing(5),\n    borderRadius: 1,\n    backgroundColor: \"#F3F2F1\"\n  },\n  buildingImageStyle: {\n    width: theme.spacing(5),\n    height: theme.spacing(5),\n    borderRadius: 2,\n    marginRight: 20,\n    border: \"1.5px dashed #F3F2F1\",\n    backgroundColor: \"#F3F2F1\"\n  },\n  inputStyle: {\n    border: 0,\n    borderRadius: 4,\n    paddingTop: 10,\n    paddingRight: 10,\n    paddingBottom: 10,\n    paddingLeft: 10,\n    backgroundColor: \"#F5F8FA\",\n    // lineHeight: 2,\n    minHeight: 60,\n    fontSize: 12,\n    \"&:focus\": {\n      border: \"1px solid #4C3AF7\",\n      backgroundColor: \"#FEFEFF\"\n    }\n  }\n}));\nconst ActionBtn = styled(ActionButton).withConfig({\n  displayName: \"CreateBuilding__ActionBtn\",\n  componentId: \"sc-1f2konc-0\"\n})([\"display:flex;justify-content:center;align-items:center;align-content:center;padding-right:10px;padding-left:10px;border-radius:2px;background-color:\", \";\"], ({\n  theme\n}) => theme.lightGrey);\nconst CloseBtn = styled(ActionButton).withConfig({\n  displayName: \"CreateBuilding__CloseBtn\",\n  componentId: \"sc-1f2konc-1\"\n})([\"z-index:1304;display:flex;justify-content:center;align-items:center;align-content:center;padding-right:6px;padding-left:6px;border-radius:2px;background-color:\", \";\"], ({\n  theme\n}) => theme.bgPrimary);\nconst AddBtn = styled(ActionButton).withConfig({\n  displayName: \"CreateBuilding__AddBtn\",\n  componentId: \"sc-1f2konc-2\"\n})([\"display:flex;justify-content:center;align-items:center;align-content:center;padding-right:10px;padding-left:10px;border-radius:2px;background-color:\", \";\"], ({\n  theme\n}) => theme.lightGrey);\nconst CancelBtn = styled(PrimaryButton).withConfig({\n  displayName: \"CreateBuilding__CancelBtn\",\n  componentId: \"sc-1f2konc-3\"\n})([\"border:none;color:\", \";background-color:transparent;&:hover{background-color:\", \";}\"], ({\n  theme\n}) => theme.primaryDark, ({\n  theme\n}) => theme.lightGrey);\nconst Tag = styled.div.withConfig({\n  displayName: \"CreateBuilding__Tag\",\n  componentId: \"sc-1f2konc-4\"\n})([\"display:flex;flex-direction:row;justify-content:center;align-items:center;border-radius:20px;background-color:#e1e1e1;padding:4px 15px;margin:0px 2px;\"]);\nconst Form = styled.form.withConfig({\n  displayName: \"CreateBuilding__Form\",\n  componentId: \"sc-1f2konc-5\"\n})([\"display:flex;flex-direction:row;padding:0px 40px;\"]);\nconst CREATE_PARENT_HOUSE_MUTATION = gql`\n  mutation CREATE_PARENT_HOUSE_MUTATION($building_name: String!) {\n    createParentHouse(building_name: $building_name) {\n      id\n      building_name\n      address\n      image\n    }\n  }\n`;\nconst ADD_HOUSE_TO_BUILDING = gql`\n  mutation AddHouseToBuilding($houseId: ID!, $buildingId: ID!) {\n    addHouseToBuilding(houseId: $houseId, buildingId: $buildingId) {\n      id\n      house_heading\n    }\n  }\n`;\n\nconst BuildingsContainer = ({\n  addTo,\n  buildings,\n  buildingList,\n  loading\n}) => {\n  const classes = useStyles();\n\n  const handleClick = building => {\n    if (!buildings.some(current => current.id === building.id)) {\n      addTo([building]);\n    } else {\n      let buildingAfterRemoval = buildings;\n      buildingAfterRemoval = buildingAfterRemoval.filter(current => current.id !== building.id);\n      addTo([...buildingAfterRemoval]);\n    }\n  };\n\n  const isBuildingSelected = building => {\n    if (buildings.some(current => current.id === building.id)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  return __jsx(Container, {\n    column: true,\n    customStyles: {\n      padding: \"10px 40px\"\n    },\n    color: \"transparent\"\n  }, loading && __jsx(Container, {\n    flex: 1,\n    middle: true,\n    center: true,\n    column: true,\n    color: \"transparent\"\n  }, __jsx(\"img\", {\n    src: loadingImg,\n    style: {\n      width: 20,\n      height: 20\n    }\n  })), !loading && buildingList && buildingList.map(build => {\n    return __jsx(Container, {\n      flex: false,\n      key: build.id,\n      column: true,\n      color: \"transparent\"\n    }, __jsx(Container, {\n      color: \"transparent\",\n      row: true,\n      center: true,\n      flex: 1,\n      customStyles: {\n        paddingTop: 15,\n        paddingBottom: 5,\n        paddingLeft: 0,\n        paddingRight: 5\n      }\n    }, __jsx(Container, {\n      row: true,\n      flex: 1,\n      center: true,\n      color: \"transparent\"\n    }, build.image === null ? __jsx(Avatar, {\n      src: build.image,\n      className: classes.avatarStyle\n    }, __jsx(SubHeader, null, build.building_name.charAt(0))) : __jsx(Avatar, {\n      src: build.image,\n      className: classes.avatarStyle\n    }), __jsx(Container, {\n      column: true,\n      flex: 1,\n      color: \"transparent\"\n    }, __jsx(SubHeader, {\n      customStyles: {\n        fontSize: 13,\n        fontWeight: \"600\",\n        marginBottom: 0,\n        marginLeft: 10\n      }\n    }, build.building_name))), __jsx(AddBtn, {\n      onClick: () => handleClick(build)\n    }, isBuildingSelected(build) ? __jsx(CheckIcon, {\n      style: {\n        fontSize: 18,\n        color: \"green\"\n      }\n    }) : __jsx(Add, {\n      style: {\n        fontSize: 18\n      }\n    }))), __jsx(Divider, {\n      style: {\n        height: \"1px\"\n      }\n    }));\n  }));\n};\n\nconst CreateBuilding = ({\n  house\n}) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const {\n    0: building_name,\n    1: setBuildingName\n  } = useState(null);\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: scroll,\n    1: setScroll\n  } = useState(\"paper\");\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const {\n    0: isloading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: addToBuilding,\n    1: setAddToBuilding\n  } = useState([]);\n  const {\n    0: buildingList,\n    1: setBuildingList\n  } = useState(null);\n\n  const onCompletion = () => {\n    setOpen(false);\n  };\n\n  const [addTo, {\n    data,\n    loading\n  }] = useMutation(ADD_HOUSE_TO_BUILDING);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  async function getBuildings(client) {\n    setLoading(true);\n    const res = await client.query({\n      query: GET_USER_PARENT_HOUSES\n    });\n    const buildings = res.data.getUserParentHouses;\n    console.log(buildings);\n    setBuildingList(buildings);\n    setLoading(false);\n  }\n\n  const isAdded = buildings => {\n    const {\n      parent_houseId\n    } = house;\n\n    if (parent_houseId !== null && buildings.some(current => current.id === parent_houseId.id)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  return __jsx(ParentHouses, null, ({\n    data\n  }) => {\n    if (data) {\n      const parentBuildings = data.getUserParentHouses;\n      return __jsx(\"div\", null, isAdded(parentBuildings) ? __jsx(SubHeader, null, \"Added\") : __jsx(IconButton, {\n        onClick: e => {\n          handleClickOpen();\n        },\n        customStyles: {\n          backgroundColor: \"#0078D4\",\n          height: 33,\n          width: 33\n        }\n      }, __jsx(Add, {\n        style: {\n          fontSize: 18,\n          color: \"white\"\n        }\n      })), __jsx(Dialog, {\n        fullScreen: fullScreen,\n        onClose: e => {\n          handleClose();\n        },\n        classes: {\n          paper: classes.dialogPaper\n        },\n        \"aria-labelledby\": \"customized-dialog-title\",\n        open: open,\n        scroll: scroll\n      }, __jsx(DialogTitle, {\n        id: \"scroll-dialog-title\",\n        classes: {\n          root: classes.dialogActionStyle\n        }\n      }, __jsx(Container, {\n        row: true,\n        center: true,\n        right: true,\n        color: \"transparent\",\n        space: \"space-between\",\n        customStyles: {\n          paddingTop: 15,\n          paddingBottom: 7,\n          paddingRight: 10,\n          paddingLeft: 20\n        }\n      }, __jsx(Container, {\n        color: \"transparent\",\n        column: true,\n        row: true,\n        center: true,\n        left: true,\n        flex: 1\n      }, __jsx(SubHeader, null, \"Add House\")), __jsx(CloseBtn, {\n        onClick: handleClose\n      }, __jsx(CloseIcon, {\n        style: {\n          fontSize: 23\n        }\n      })))), __jsx(DialogContent, {\n        classes: {\n          root: classes.dialogContentStyle\n        }\n      }, __jsx(Container, {\n        flex: 1,\n        column: true,\n        color: \"transparent\",\n        customStyles: {\n          paddingTop: 10,\n          paddingBottom: 10\n        }\n      }, __jsx(Container, {\n        customStyles: {\n          paddingLeft: \"40px\"\n        },\n        row: true,\n        center: true,\n        color: \"transparent\"\n      }, house.profileImage === null ? __jsx(Avatar, {\n        src: house.profileImage,\n        className: classes.avatarStyle\n      }, __jsx(Header, null, house.house_heading.charAt(0))) : __jsx(Avatar, {\n        src: house.profileImage,\n        className: classes.avatarStyle\n      }), __jsx(CaptionText, {\n        customStyles: {\n          marginLeft: 20\n        }\n      }, \"You are adding Barcelona\")), __jsx(Mutation, {\n        mutation: CREATE_PARENT_HOUSE_MUTATION,\n        variables: {\n          building_name\n        }\n      }, (createParentHouse, {\n        loading,\n        error\n      }) => {\n        return __jsx(Form, {\n          method: \"post\",\n          onSubmit: async e => {\n            e.preventDefault();\n            await createParentHouse().then(res => {\n              const newBuilding = res.data.createParentHouse;\n              setBuildingList([...buildingList, newBuilding]);\n              setBuildingName(null);\n            });\n          }\n        }, __jsx(\"fieldset\", {\n          style: {\n            display: \"flex\",\n            paddingRight: 0,\n            paddingLeft: 0,\n            paddingBottom: 10,\n            paddingTop: 30,\n            border: \"none\",\n            flex: 1\n          }\n        }, __jsx(Container, {\n          row: true,\n          color: \"transparent\",\n          flex: 1\n        }, __jsx(Container, {\n          flex: 1,\n          column: true,\n          middle: true,\n          color: \"transparent\",\n          customStyles: {\n            paddingRight: 10\n          }\n        }, __jsx(Input, {\n          placeholder: \"Create a new building\",\n          type: \"text\",\n          value: building_name,\n          onChange: e => setBuildingName(e.target.value)\n        })), __jsx(Container, {\n          flex: false,\n          column: true,\n          color: \"transparent\",\n          customStyles: {\n            paddingTop: 5\n          }\n        }, __jsx(PrimaryButton, {\n          type: \"submit\",\n          customStyles: {\n            pointerEvents: building_name === null ? \"none\" : \"auto\",\n            opacity: building_name === null ? 0.3 : 1.0\n          }\n        }, loading ? \"CREATING\" : \"CREATE\")))));\n      }), __jsx(BuildingsContainer, {\n        loading: isloading,\n        addTo: setAddToBuilding,\n        buildings: addToBuilding,\n        buildingList: parentBuildings\n      }))), __jsx(DialogActions, {\n        className: classes.dialogActions\n      }, __jsx(PrimaryButton, {\n        customStyles: {\n          pointerEvents: addToBuilding.length <= 0 ? \"none\" : \"auto\",\n          opacity: addToBuilding.length <= 0 ? 0.4 : 1.0\n        },\n        onClick: () => {\n          addTo({\n            variables: {\n              houseId: house.id,\n              buildingId: addToBuilding[0].id\n            },\n            onCompleted: onCompletion\n          });\n        }\n      }, loading ? \"SAVING\" : \"SAVE\"))));\n    }\n\n    return null;\n  });\n};\n\nexport default CreateBuilding;","map":null,"metadata":{},"sourceType":"module"}