{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Projects/React js/House /HouseAssist/frontend/components/landlord/house/DeleteParentHouse.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport { GET_USER_PARENT_HOUSES } from \"../../queryComponents/ParentHouses\";\nimport gql from \"graphql-tag\";\nconst DELETE_PARENT_HOUSE = gql`\n  mutation DELETE_PARENT_HOUSE($id: ID!) {\n    deleteParentHouse(id: $id) {\n      id\n      building_name\n      image\n    }\n  }\n`;\n\nclass DeleteParentHouse extends React.Component {\n  //   update = (cache, payload) => {\n  //     // manually update the cache on the client, so it matches the server\n  //     // 1. Read the cache for the items we want\n  //     const data = cache.readQuery({ query: GET_USER_PARENT_HOUSES });\n  //     // console.log(data, payload);\n  //     // 2. Filter the deleted itemout of the page\n  //     // data.items = data.items.filter(\n  //     //   item => item.id !== payload.data.deleteItem.id\n  //     // );\n  //     // 3. Put the items back!\n  //     cache.writeQuery({ query: GET_USER_PARENT_HOUSES, data });\n  //   };\n  render() {\n    return __jsx(Mutation, {\n      mutation: DELETE_PARENT_HOUSE,\n      variables: {\n        id: this.props.id\n      },\n      refetchQueries: [{\n        query: GET_USER_PARENT_HOUSES\n      }] // update={this.update}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    }, (deleteParentHouse, {\n      error\n    }) => __jsx(\"button\", {\n      style: {\n        color: \"red\"\n      },\n      onClick: () => {\n        if (confirm(\"Are you sure you want to delete this building?\")) {\n          deleteParentHouse().catch(err => {\n            alert(err.message);\n          });\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }\n    }, \"delete\"));\n  }\n\n}\n\nexport default DeleteParentHouse;","map":{"version":3,"sources":["/Users/mac/Projects/React js/House /HouseAssist/frontend/components/landlord/house/DeleteParentHouse.js"],"names":["React","Mutation","GET_USER_PARENT_HOUSES","gql","DELETE_PARENT_HOUSE","DeleteParentHouse","Component","render","id","props","query","deleteParentHouse","error","color","confirm","catch","err","alert","message"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,sBAAT,QAAuC,oCAAvC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,MAAMC,mBAAmB,GAAGD,GAAI;;;;;;;;CAAhC;;AAUA,MAAME,iBAAN,SAAgCL,KAAK,CAACM,SAAtC,CAAgD;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,QAAD;AACE,MAAA,QAAQ,EAAEH,mBADZ;AAEE,MAAA,SAAS,EAAE;AAAEI,QAAAA,EAAE,EAAE,KAAKC,KAAL,CAAWD;AAAjB,OAFb;AAGE,MAAA,cAAc,EAAE,CAAC;AAAEE,QAAAA,KAAK,EAAER;AAAT,OAAD,CAHlB,CAIE;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMG,CAACS,iBAAD,EAAoB;AAAEC,MAAAA;AAAF,KAApB,KACC;AACE,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OADT;AAEE,MAAA,OAAO,EAAE,MAAM;AACb,YAAIC,OAAO,CAAC,gDAAD,CAAX,EAA+D;AAC7DH,UAAAA,iBAAiB,GAAGI,KAApB,CAA0BC,GAAG,IAAI;AAC/BC,YAAAA,KAAK,CAACD,GAAG,CAACE,OAAL,CAAL;AACD,WAFD;AAGD;AACF,OARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPJ,CADF;AAuBD;;AArC6C;;AAwChD,eAAeb,iBAAf","sourcesContent":["import React from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport { GET_USER_PARENT_HOUSES } from \"../../queryComponents/ParentHouses\";\nimport gql from \"graphql-tag\";\n\nconst DELETE_PARENT_HOUSE = gql`\n  mutation DELETE_PARENT_HOUSE($id: ID!) {\n    deleteParentHouse(id: $id) {\n      id\n      building_name\n      image\n    }\n  }\n`;\n\nclass DeleteParentHouse extends React.Component {\n  //   update = (cache, payload) => {\n  //     // manually update the cache on the client, so it matches the server\n  //     // 1. Read the cache for the items we want\n  //     const data = cache.readQuery({ query: GET_USER_PARENT_HOUSES });\n  //     // console.log(data, payload);\n  //     // 2. Filter the deleted itemout of the page\n  //     // data.items = data.items.filter(\n  //     //   item => item.id !== payload.data.deleteItem.id\n  //     // );\n  //     // 3. Put the items back!\n  //     cache.writeQuery({ query: GET_USER_PARENT_HOUSES, data });\n  //   };\n  render() {\n    return (\n      <Mutation\n        mutation={DELETE_PARENT_HOUSE}\n        variables={{ id: this.props.id }}\n        refetchQueries={[{ query: GET_USER_PARENT_HOUSES }]}\n        // update={this.update}\n      >\n        {(deleteParentHouse, { error }) => (\n          <button\n            style={{ color: \"red\" }}\n            onClick={() => {\n              if (confirm(\"Are you sure you want to delete this building?\")) {\n                deleteParentHouse().catch(err => {\n                  alert(err.message);\n                });\n              }\n            }}\n          >\n            delete\n          </button>\n        )}\n      </Mutation>\n    );\n  }\n}\n\nexport default DeleteParentHouse;\n"]},"metadata":{},"sourceType":"module"}