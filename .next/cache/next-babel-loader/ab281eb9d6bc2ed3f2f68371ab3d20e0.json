{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport styled, { keyframes, css } from \"styled-components\";\nimport onClickOutside from \"react-onclickoutside\";\nimport Container from \"./Container\";\nimport { OutlinedButton, CommandButton } from \"./Button\";\nimport { CaptionText } from \"./Text\";\nimport DownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport CheckIcon from \"@material-ui/icons/Done\";\nimport { Button, Typography, Popover } from \"@material-ui/core\";\nconst useStyles = makeStyles(theme => ({\n  typography: {\n    padding: theme.spacing(2)\n  },\n  popoverPaper: {\n    display: \"flex\",\n    padding: 0,\n    marginLeft: 0,\n    marginRight: 0,\n    borderRadius: 0\n  }\n}));\nconst DropWrapper = styled(Container).withConfig({\n  displayName: \"DropDown__DropWrapper\",\n  componentId: \"sc-1atbjfe-0\"\n})([\"flex:0;background-color:transparent;position:relative;\", \";\"], props => props.customStyles);\nconst DropHeader = styled(OutlinedButton).withConfig({\n  displayName: \"DropDown__DropHeader\",\n  componentId: \"sc-1atbjfe-1\"\n})([\"display:flex;flex-direction:row;flex:0;align-items:center;justify-content:space-between;min-height:35px;padding:0px 5px;border:1px solid #d7dbdd;border-radius:1px;background-color:#f5f8fa;outline:transparent;\", \" \", \";\"], open => open && css([\" border:1px solid #5B86C6,background-color:#FEFEFF\"]), props => props.headerStyles);\nconst DropHeaderTitle = styled(Container).withConfig({\n  displayName: \"DropDown__DropHeaderTitle\",\n  componentId: \"sc-1atbjfe-2\"\n})([\"display:flex;background-color:transparent;flex:1;flex-direction:row;align-items:center;\"]);\nconst DropListContainer = styled(Container).withConfig({\n  displayName: \"DropDown__DropListContainer\",\n  componentId: \"sc-1atbjfe-3\"\n})([\"display:flex;flex:1;border-radius:1px;box-shadow:0 1.6px 3.6px 0 rgba(0,0,0,0.132),0 0.3px 0.9px 0 rgba(0,0,0,0.108);\", \"\"], props => props.customStyles);\nconst DropListItem = styled(CommandButton).withConfig({\n  displayName: \"DropDown__DropListItem\",\n  componentId: \"sc-1atbjfe-4\"\n})([\"display:flex;flex-direction:row;align-items:center;justify-content:space-between;padding:8px 10px;\"]);\n\nconst Dropdown = ({\n  anchorEl,\n  handleOpen,\n  handleClose,\n  title,\n  items,\n  wrapperStyles,\n  selection,\n  setSelection,\n  headerStyles,\n  multiSelect\n}) => {\n  const classes = useStyles();\n  const open = Boolean(anchorEl);\n  const id = open ? \"simple-popover\" : undefined;\n\n  Dropdown.handleClickOutside = () => {\n    handleClose();\n  };\n\n  const handleClick = item => {\n    if (!selection.some(current => current.id === item.id)) {\n      if (!multiSelect) {\n        setSelection([item]);\n      } else if (multiSelect) {\n        setSelection([...selection, item]);\n      }\n    } else {\n      let selectionAfterRemoval = selection;\n      selectionAfterRemoval = selectionAfterRemoval.filter(current => current.id !== item.id);\n      setSelection([...selectionAfterRemoval]);\n    }\n  };\n\n  const isItemSelected = item => {\n    if (selection.some(current => current.id === item.id)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  return __jsx(DropWrapper, {\n    customStyles: wrapperStyles\n  }, __jsx(DropHeader, {\n    onClick: handleOpen,\n    type: \"button\"\n  }, __jsx(DropHeaderTitle, null, __jsx(CaptionText, {\n    customStyles: {\n      fontSize: 14,\n      color: \"#1c2833\"\n    }\n  }, title)), __jsx(Container, {\n    flex: 0,\n    column: true,\n    middle: true,\n    center: true,\n    color: \"transparent\"\n  }, __jsx(DownIcon, null))), __jsx(Popover, {\n    id: id,\n    open: open,\n    anchorEl: anchorEl,\n    onClose: handleClose,\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"center\"\n    },\n    transformOrigin: {\n      vertical: \"top\",\n      horizontal: \"center\"\n    },\n    elevation: 0,\n    classes: {\n      paper: classes.popoverPaper\n    }\n  }, __jsx(DropListContainer, {\n    customStyles: wrapperStyles\n  }, items.map(item => {\n    return __jsx(DropListItem, {\n      key: item.id,\n      type: \"button\",\n      onClick: () => handleClick(item)\n    }, __jsx(\"span\", null, item.value), isItemSelected(item) && __jsx(CheckIcon, {\n      style: {\n        color: \"green\"\n      }\n    }));\n  }))));\n};\n\nconst clickOutsideConfig = {\n  handleClickOutside: () => Dropdown.handleClickOutside\n};\nexport default onClickOutside(Dropdown, clickOutsideConfig);","map":null,"metadata":{},"sourceType":"module"}