{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation DELETE_PARENT_HOUSE($id: ID!) {\\n    deleteParentHouse(id: $id) {\\n      id\\n      building_name\\n      image\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport { GET_USER_PARENT_HOUSES } from \"../../queryComponents/ParentHouses\";\nimport gql from \"graphql-tag\";\nvar DELETE_PARENT_HOUSE = gql(_templateObject());\n\nvar DeleteParentHouse = /*#__PURE__*/function (_React$Component) {\n  _inherits(DeleteParentHouse, _React$Component);\n\n  var _super = _createSuper(DeleteParentHouse);\n\n  function DeleteParentHouse() {\n    _classCallCheck(this, DeleteParentHouse);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DeleteParentHouse, [{\n    key: \"render\",\n    //   update = (cache, payload) => {\n    //     // manually update the cache on the client, so it matches the server\n    //     // 1. Read the cache for the items we want\n    //     const data = cache.readQuery({ query: GET_USER_PARENT_HOUSES });\n    //     // console.log(data, payload);\n    //     // 2. Filter the deleted itemout of the page\n    //     // data.items = data.items.filter(\n    //     //   item => item.id !== payload.data.deleteItem.id\n    //     // );\n    //     // 3. Put the items back!\n    //     cache.writeQuery({ query: GET_USER_PARENT_HOUSES, data });\n    //   };\n    value: function render() {\n      return __jsx(Mutation, {\n        mutation: DELETE_PARENT_HOUSE,\n        variables: {\n          id: this.props.id\n        },\n        refetchQueries: [{\n          query: GET_USER_PARENT_HOUSES\n        }] // update={this.update}\n\n      }, function (deleteParentHouse, _ref) {\n        var error = _ref.error;\n        return __jsx(\"button\", {\n          style: {\n            color: \"red\"\n          },\n          onClick: function onClick() {\n            if (confirm(\"Are you sure you want to delete this building?\")) {\n              deleteParentHouse()[\"catch\"](function (err) {\n                alert(err.message);\n              });\n            }\n          }\n        }, \"delete\");\n      });\n    }\n  }]);\n\n  return DeleteParentHouse;\n}(React.Component);\n\nexport default DeleteParentHouse;","map":null,"metadata":{},"sourceType":"module"}