{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/mac/Projects/React js/House /HouseAssist/frontend/components/landlord/house/DeleteParentHouse.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation DELETE_PARENT_HOUSE($id: ID!) {\\n    deleteParentHouse(id: $id) {\\n      id\\n      building_name\\n      image\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport { GET_USER_PARENT_HOUSES } from \"../../queryComponents/ParentHouses\";\nimport gql from \"graphql-tag\";\nvar DELETE_PARENT_HOUSE = gql(_templateObject());\n\nvar DeleteParentHouse = /*#__PURE__*/function (_React$Component) {\n  _inherits(DeleteParentHouse, _React$Component);\n\n  var _super = _createSuper(DeleteParentHouse);\n\n  function DeleteParentHouse() {\n    _classCallCheck(this, DeleteParentHouse);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DeleteParentHouse, [{\n    key: \"render\",\n    //   update = (cache, payload) => {\n    //     // manually update the cache on the client, so it matches the server\n    //     // 1. Read the cache for the items we want\n    //     const data = cache.readQuery({ query: GET_USER_PARENT_HOUSES });\n    //     // console.log(data, payload);\n    //     // 2. Filter the deleted itemout of the page\n    //     // data.items = data.items.filter(\n    //     //   item => item.id !== payload.data.deleteItem.id\n    //     // );\n    //     // 3. Put the items back!\n    //     cache.writeQuery({ query: GET_USER_PARENT_HOUSES, data });\n    //   };\n    value: function render() {\n      var _this = this;\n\n      return __jsx(Mutation, {\n        mutation: DELETE_PARENT_HOUSE,\n        variables: {\n          id: this.props.id\n        },\n        refetchQueries: [{\n          query: GET_USER_PARENT_HOUSES\n        }] // update={this.update}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 7\n        }\n      }, function (deleteParentHouse, _ref) {\n        var error = _ref.error;\n        return __jsx(\"button\", {\n          style: {\n            color: \"red\"\n          },\n          onClick: function onClick() {\n            if (confirm(\"Are you sure you want to delete this building?\")) {\n              deleteParentHouse()[\"catch\"](function (err) {\n                alert(err.message);\n              });\n            }\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 11\n          }\n        }, \"delete\");\n      });\n    }\n  }]);\n\n  return DeleteParentHouse;\n}(React.Component);\n\nexport default DeleteParentHouse;","map":{"version":3,"sources":["/Users/mac/Projects/React js/House /HouseAssist/frontend/components/landlord/house/DeleteParentHouse.js"],"names":["React","Mutation","GET_USER_PARENT_HOUSES","gql","DELETE_PARENT_HOUSE","DeleteParentHouse","id","props","query","deleteParentHouse","error","color","confirm","err","alert","message","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,sBAAT,QAAuC,oCAAvC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,IAAMC,mBAAmB,GAAGD,GAAH,mBAAzB;;IAUME,iB;;;;;;;;;;;;;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;6BACS;AAAA;;AACP,aACE,MAAC,QAAD;AACE,QAAA,QAAQ,EAAED,mBADZ;AAEE,QAAA,SAAS,EAAE;AAAEE,UAAAA,EAAE,EAAE,KAAKC,KAAL,CAAWD;AAAjB,SAFb;AAGE,QAAA,cAAc,EAAE,CAAC;AAAEE,UAAAA,KAAK,EAAEN;AAAT,SAAD,CAHlB,CAIE;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMG,UAACO,iBAAD;AAAA,YAAsBC,KAAtB,QAAsBA,KAAtB;AAAA,eACC;AACE,UAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAE;AAAT,WADT;AAEE,UAAA,OAAO,EAAE,mBAAM;AACb,gBAAIC,OAAO,CAAC,gDAAD,CAAX,EAA+D;AAC7DH,cAAAA,iBAAiB,WAAjB,CAA0B,UAAAI,GAAG,EAAI;AAC/BC,gBAAAA,KAAK,CAACD,GAAG,CAACE,OAAL,CAAL;AACD,eAFD;AAGD;AACF,WARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD;AAAA,OANH,CADF;AAuBD;;;;EArC6Bf,KAAK,CAACgB,S;;AAwCtC,eAAeX,iBAAf","sourcesContent":["import React from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport { GET_USER_PARENT_HOUSES } from \"../../queryComponents/ParentHouses\";\nimport gql from \"graphql-tag\";\n\nconst DELETE_PARENT_HOUSE = gql`\n  mutation DELETE_PARENT_HOUSE($id: ID!) {\n    deleteParentHouse(id: $id) {\n      id\n      building_name\n      image\n    }\n  }\n`;\n\nclass DeleteParentHouse extends React.Component {\n  //   update = (cache, payload) => {\n  //     // manually update the cache on the client, so it matches the server\n  //     // 1. Read the cache for the items we want\n  //     const data = cache.readQuery({ query: GET_USER_PARENT_HOUSES });\n  //     // console.log(data, payload);\n  //     // 2. Filter the deleted itemout of the page\n  //     // data.items = data.items.filter(\n  //     //   item => item.id !== payload.data.deleteItem.id\n  //     // );\n  //     // 3. Put the items back!\n  //     cache.writeQuery({ query: GET_USER_PARENT_HOUSES, data });\n  //   };\n  render() {\n    return (\n      <Mutation\n        mutation={DELETE_PARENT_HOUSE}\n        variables={{ id: this.props.id }}\n        refetchQueries={[{ query: GET_USER_PARENT_HOUSES }]}\n        // update={this.update}\n      >\n        {(deleteParentHouse, { error }) => (\n          <button\n            style={{ color: \"red\" }}\n            onClick={() => {\n              if (confirm(\"Are you sure you want to delete this building?\")) {\n                deleteParentHouse().catch(err => {\n                  alert(err.message);\n                });\n              }\n            }}\n          >\n            delete\n          </button>\n        )}\n      </Mutation>\n    );\n  }\n}\n\nexport default DeleteParentHouse;\n"]},"metadata":{},"sourceType":"module"}