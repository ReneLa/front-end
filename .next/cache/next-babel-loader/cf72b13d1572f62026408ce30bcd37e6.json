{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Projects/React js/House /HouseAssist/frontend/components/styledComponents/DropDown.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport styled, { keyframes, css } from \"styled-components\";\nimport onClickOutside from \"react-onclickoutside\";\nimport Container from \"./Container\";\nimport { OutlinedButton } from \"./Button\";\nimport { CaptionText } from \"./Text\";\nimport DownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport { Button, Typography, Popover } from \"@material-ui/core\";\nconst useStyles = makeStyles(theme => ({\n  typography: {\n    padding: theme.spacing(2)\n  }\n}));\nconst DropWrapper = styled(Container).withConfig({\n  displayName: \"DropDown__DropWrapper\",\n  componentId: \"sc-1atbjfe-0\"\n})([\"display:flex;background-color:\\\"transparent\\\";\", \";\"], props => props.wrapperStyles);\nconst DropHeader = styled().withConfig({\n  displayName: \"DropDown__DropHeader\",\n  componentId: \"sc-1atbjfe-1\"\n})([\"display:flex;flex-direction:row;flex:0;align-items:center;justify-content:space-between;padding:8px 8px;border:1px solid #d7dbdd;border-radius:4px;background-color:#f5f8fa;outline:transparent;\", \" \", \";\"], open => open && css` border: 1px solid #5B86C6,\n    background-color: #FEFEFF`, props => props.headerStyles);\nconst DropHeaderTitle = styled(Container).withConfig({\n  displayName: \"DropDown__DropHeaderTitle\",\n  componentId: \"sc-1atbjfe-2\"\n})([\"display:flex;flex:1;flex-direction:row;align-items:center;\"]);\n\nconst Dropdown = ({\n  title,\n  items,\n  wrapperStyles,\n  headerStyles,\n  multiSelect = false\n}) => {\n  const classes = useStyles(); // const [open, setOpen] = useState(false);\n\n  const {\n    0: selection,\n    1: setSelection\n  } = useState([]);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n  const id = open ? \"simple-popover\" : undefined;\n\n  Dropdown.handleClickOutside = () => {\n    // setOpen(false);\n    setAnchorEl(null);\n  };\n\n  const handleClickOpen = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleClick = item => {\n    if (!selection.some(current => current.id === item.id)) {\n      if (!multiSelect) {\n        setSelection([item]);\n      } else if (multiSelect) {\n        setSelection([...selection, item]);\n      }\n    } else {\n      let selectionAfterRemoval = selection;\n      selectionAfterRemoval = selectionAfterRemoval.filter(current => current.id !== item.id);\n      setSelection([...selectionAfterRemoval]);\n    }\n  };\n\n  const isItemSelected = item => {\n    if (selection.some(current => current.id === item.id)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const toggle = () => {\n    setOpen(!open);\n  };\n\n  return __jsx(Container, {\n    flex: false,\n    color: \"transparent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 10\n    }\n  });\n};\n\nconst clickOutsideConfig = {\n  handleClickOutside: () => Dropdown.handleClickOutside\n}; // export { DropDown, DropDownItem, SearchStyles };\n\nexport default onClickOutside(Dropdown, clickOutsideConfig);\n/*\n <DropWrapper>\n      <DropHeader\n        tabIndex={0}\n        role=\"button\"\n        // onKeyPress={() => handleClickOpen}\n        onClick={() => handleClickOpen}\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <DropHeaderTitle open={open}>\n          <CaptionText customStyles={{ fontSize: 14, color: \"#1c2833\" }}>\n            {title}\n          </CaptionText>\n        </DropHeaderTitle>\n        <Container column center middle>\n          <DownIcon />\n        </Container>\n      </DropHeader>\n      <Popover\n        id={id}\n        open={true}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\",\n        }}\n      >\n        <ul className=\"dd-list\">\n          {items.map((item) => {\n            return (\n              <li className=\"dd-list-item\" key={item.id}>\n                <button type=\"button\" onClick={() => handleClick(item)}>\n                  <span>{item.value}</span>\n                  <span>{isItemSelected(item) && \"selected\"} </span>\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </Popover>\n    </DropWrapper>\n*/","map":{"version":3,"sources":["/Users/mac/Projects/React js/House /HouseAssist/frontend/components/styledComponents/DropDown.js"],"names":["React","useState","makeStyles","styled","keyframes","css","onClickOutside","Container","OutlinedButton","CaptionText","DownIcon","Button","Typography","Popover","useStyles","theme","typography","padding","spacing","DropWrapper","props","wrapperStyles","DropHeader","open","headerStyles","DropHeaderTitle","Dropdown","title","items","multiSelect","classes","selection","setSelection","anchorEl","setAnchorEl","Boolean","id","undefined","handleClickOutside","handleClickOpen","event","currentTarget","handleClose","handleClick","item","some","current","selectionAfterRemoval","filter","isItemSelected","toggle","setOpen","clickOutsideConfig"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport styled, { keyframes, css } from \"styled-components\";\nimport onClickOutside from \"react-onclickoutside\";\nimport Container from \"./Container\";\nimport { OutlinedButton } from \"./Button\";\nimport { CaptionText } from \"./Text\";\nimport DownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport { Button, Typography, Popover } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  typography: {\n    padding: theme.spacing(2),\n  },\n}));\n\nconst DropWrapper = styled(Container)`\n  display: flex;\n  /* padding: 15px 10px; */\n  background-color: \"transparent\";\n  ${(props) => props.wrapperStyles};\n`;\n\nconst DropHeader = styled()`\n  display: flex;\n  flex-direction: row;\n  flex: 0;\n  align-items: center;\n  justify-content: space-between;\n  padding: 8px 8px;\n  border: 1px solid #d7dbdd;\n  border-radius: 4px;\n  background-color: #f5f8fa;\n  outline: transparent;\n  ${(open) =>\n    open &&\n    css` border: 1px solid #5B86C6,\n    background-color: #FEFEFF`}\n\n  ${(props) => props.headerStyles};\n`;\nconst DropHeaderTitle = styled(Container)`\n  display: flex;\n  flex: 1;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst Dropdown = ({\n  title,\n  items,\n  wrapperStyles,\n  headerStyles,\n  multiSelect = false,\n}) => {\n  const classes = useStyles();\n\n  // const [open, setOpen] = useState(false);\n  const [selection, setSelection] = useState([]);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n  const id = open ? \"simple-popover\" : undefined;\n\n  Dropdown.handleClickOutside = () => {\n    // setOpen(false);\n    setAnchorEl(null);\n  };\n  const handleClickOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const handleClick = (item) => {\n    if (!selection.some((current) => current.id === item.id)) {\n      if (!multiSelect) {\n        setSelection([item]);\n      } else if (multiSelect) {\n        setSelection([...selection, item]);\n      }\n    } else {\n      let selectionAfterRemoval = selection;\n      selectionAfterRemoval = selectionAfterRemoval.filter(\n        (current) => current.id !== item.id\n      );\n      setSelection([...selectionAfterRemoval]);\n    }\n  };\n  const isItemSelected = (item) => {\n    if (selection.some((current) => current.id === item.id)) {\n      return true;\n    }\n    return false;\n  };\n  const toggle = () => {\n    setOpen(!open);\n  };\n\n  return <Container flex={false} color=\"transparent\"></Container>;\n};\n\nconst clickOutsideConfig = {\n  handleClickOutside: () => Dropdown.handleClickOutside,\n};\n// export { DropDown, DropDownItem, SearchStyles };\nexport default onClickOutside(Dropdown, clickOutsideConfig);\n\n/*\n <DropWrapper>\n      <DropHeader\n        tabIndex={0}\n        role=\"button\"\n        // onKeyPress={() => handleClickOpen}\n        onClick={() => handleClickOpen}\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <DropHeaderTitle open={open}>\n          <CaptionText customStyles={{ fontSize: 14, color: \"#1c2833\" }}>\n            {title}\n          </CaptionText>\n        </DropHeaderTitle>\n        <Container column center middle>\n          <DownIcon />\n        </Container>\n      </DropHeader>\n      <Popover\n        id={id}\n        open={true}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\",\n        }}\n      >\n        <ul className=\"dd-list\">\n          {items.map((item) => {\n            return (\n              <li className=\"dd-list-item\" key={item.id}>\n                <button type=\"button\" onClick={() => handleClick(item)}>\n                  <span>{item.value}</span>\n                  <span>{isItemSelected(item) && \"selected\"} </span>\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </Popover>\n    </DropWrapper>\n*/\n"]},"metadata":{},"sourceType":"module"}